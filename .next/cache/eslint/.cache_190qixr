[{"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/AssignRole.tsx":"1","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/LandingPage.tsx":"2","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/LoginForm.tsx":"3","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/MemberProfileCard.tsx":"4","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/Members.tsx":"5","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/RegistrationForm.tsx":"6","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/Title.tsx":"7","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/UnsavedChanges.tsx":"8","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/ViewMedia.tsx":"9","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/AboutServer.tsx":"10","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/AddServer.tsx":"11","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/CreateServer.tsx":"12","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/CustomizeServer.tsx":"13","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/JoinServer.tsx":"14","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/Channels.tsx":"15","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/DeafenIcon.tsx":"16","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/MuteIcon.tsx":"17","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/SettingsIcon.tsx":"18","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/UserPanel.tsx":"19","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/Chat.tsx":"20","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/Message.tsx":"21","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/Messages.tsx":"22","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/SendGif.tsx":"23","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/textArea/GifIcon.tsx":"24","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/textArea/TextArea.tsx":"25","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/textArea/UploadImageIcon.tsx":"26","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverDropdown/CreateChannel.tsx":"27","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverDropdown/InviteFriends.tsx":"28","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverDropdown/ServerDropdown.tsx":"29","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/ServerSettings.tsx":"30","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/ServerSettingsSidebar.tsx":"31","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/ServerModeration.tsx":"32","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/ServerOverview.tsx":"33","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/ServerSettingsView.tsx":"34","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/serverRoles/ServerRoles.tsx":"35","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/serverRoles/ServerRolesSidebar.tsx":"36","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/serverRoles/SeverEditRole.tsx":"37","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/servers/AddServerIcon.tsx":"38","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/servers/DefaultServerIcon.tsx":"39","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/servers/Servers.tsx":"40","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/ChangeEmail.tsx":"41","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/ChangeUsername.tsx":"42","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/GithubIcon.tsx":"43","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/InstagramIcon.tsx":"44","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/LogoutConfirm.tsx":"45","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/TwitterIcon.tsx":"46","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/UserSettings.tsx":"47","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/UserSettingsSidebar.tsx":"48","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/UserSettingsView.tsx":"49","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/appearanceSettings/AppearanceSettings.tsx":"50","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/myAccountSettings/MyAccountCard.tsx":"51","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/myAccountSettings/MyAccountSettings.tsx":"52","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/userProfileSettings/ChangeAvatar.tsx":"53","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/userProfileSettings/UserProfileCard.tsx":"54","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/userProfileSettings/UserProfileSettings.tsx":"55","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/addServer.ts":"56","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/sendGif.ts":"57","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/serverSettings.ts":"58","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/servers.ts":"59","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/user.ts":"60","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/userSettings.ts":"61","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/middleware.ts":"62","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/_app.tsx":"63","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/_document.tsx":"64","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/channels/@me.tsx":"65","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/channels/[sid]/[cid].tsx":"66","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/login.tsx":"67","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/register.tsx":"68","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/redux/hooks.ts":"69","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/redux/store.ts":"70","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/utilities/functions.tsx":"71"},{"size":3462,"mtime":1683230442911,"results":"72","hashOfConfig":"73"},{"size":851,"mtime":1683281145352,"results":"74","hashOfConfig":"73"},{"size":4535,"mtime":1683130184383,"results":"75","hashOfConfig":"73"},{"size":8402,"mtime":1683230442911,"results":"76","hashOfConfig":"73"},{"size":10008,"mtime":1683230442888,"results":"77","hashOfConfig":"73"},{"size":23213,"mtime":1683993940435,"results":"78","hashOfConfig":"73"},{"size":1937,"mtime":1683537555579,"results":"79","hashOfConfig":"73"},{"size":3976,"mtime":1683128498867,"results":"80","hashOfConfig":"73"},{"size":1634,"mtime":1683128498867,"results":"81","hashOfConfig":"73"},{"size":3344,"mtime":1683128498867,"results":"82","hashOfConfig":"73"},{"size":636,"mtime":1683128498867,"results":"83","hashOfConfig":"73"},{"size":2953,"mtime":1683128498867,"results":"84","hashOfConfig":"73"},{"size":6124,"mtime":1683128498867,"results":"85","hashOfConfig":"73"},{"size":3856,"mtime":1683128498868,"results":"86","hashOfConfig":"73"},{"size":4333,"mtime":1683230442912,"results":"87","hashOfConfig":"73"},{"size":691,"mtime":1683128498868,"results":"88","hashOfConfig":"73"},{"size":1016,"mtime":1683128498868,"results":"89","hashOfConfig":"73"},{"size":897,"mtime":1683128498868,"results":"90","hashOfConfig":"73"},{"size":2713,"mtime":1683281186216,"results":"91","hashOfConfig":"73"},{"size":618,"mtime":1683281121162,"results":"92","hashOfConfig":"73"},{"size":6537,"mtime":1683128498868,"results":"93","hashOfConfig":"73"},{"size":2968,"mtime":1683128498869,"results":"94","hashOfConfig":"73"},{"size":6043,"mtime":1683230442912,"results":"95","hashOfConfig":"73"},{"size":921,"mtime":1683128498869,"results":"96","hashOfConfig":"73"},{"size":5700,"mtime":1683230552751,"results":"97","hashOfConfig":"73"},{"size":481,"mtime":1683128498869,"results":"98","hashOfConfig":"73"},{"size":4672,"mtime":1683128498869,"results":"99","hashOfConfig":"73"},{"size":4122,"mtime":1683230442911,"results":"100","hashOfConfig":"73"},{"size":2178,"mtime":1683128498869,"results":"101","hashOfConfig":"73"},{"size":2105,"mtime":1683128498870,"results":"102","hashOfConfig":"73"},{"size":3059,"mtime":1683230442911,"results":"103","hashOfConfig":"73"},{"size":6737,"mtime":1683230443093,"results":"104","hashOfConfig":"73"},{"size":5941,"mtime":1683128498870,"results":"105","hashOfConfig":"73"},{"size":991,"mtime":1683128498870,"results":"106","hashOfConfig":"73"},{"size":5378,"mtime":1683230443209,"results":"107","hashOfConfig":"73"},{"size":2528,"mtime":1683230443325,"results":"108","hashOfConfig":"73"},{"size":7484,"mtime":1683128498871,"results":"109","hashOfConfig":"73"},{"size":615,"mtime":1683128498871,"results":"110","hashOfConfig":"73"},{"size":1160,"mtime":1683128498871,"results":"111","hashOfConfig":"73"},{"size":5768,"mtime":1683128498871,"results":"112","hashOfConfig":"73"},{"size":3627,"mtime":1683230443055,"results":"113","hashOfConfig":"73"},{"size":4274,"mtime":1683230442911,"results":"114","hashOfConfig":"73"},{"size":1030,"mtime":1683128498871,"results":"115","hashOfConfig":"73"},{"size":4379,"mtime":1683128498871,"results":"116","hashOfConfig":"73"},{"size":2029,"mtime":1683230442911,"results":"117","hashOfConfig":"73"},{"size":1411,"mtime":1683128498872,"results":"118","hashOfConfig":"73"},{"size":2490,"mtime":1683128498872,"results":"119","hashOfConfig":"73"},{"size":4237,"mtime":1683230442911,"results":"120","hashOfConfig":"73"},{"size":841,"mtime":1683128498872,"results":"121","hashOfConfig":"73"},{"size":3060,"mtime":1683230443209,"results":"122","hashOfConfig":"73"},{"size":3589,"mtime":1683230443325,"results":"123","hashOfConfig":"73"},{"size":780,"mtime":1683128498872,"results":"124","hashOfConfig":"73"},{"size":2894,"mtime":1683128498872,"results":"125","hashOfConfig":"73"},{"size":2791,"mtime":1683230443209,"results":"126","hashOfConfig":"73"},{"size":4983,"mtime":1683128498873,"results":"127","hashOfConfig":"73"},{"size":866,"mtime":1683128498873,"results":"128","hashOfConfig":"73"},{"size":580,"mtime":1683128498873,"results":"129","hashOfConfig":"73"},{"size":3495,"mtime":1683128498873,"results":"130","hashOfConfig":"73"},{"size":5820,"mtime":1683128498873,"results":"131","hashOfConfig":"73"},{"size":1970,"mtime":1683128498873,"results":"132","hashOfConfig":"73"},{"size":2594,"mtime":1683128498873,"results":"133","hashOfConfig":"73"},{"size":615,"mtime":1683128498873,"results":"134","hashOfConfig":"73"},{"size":332,"mtime":1683128498874,"results":"135","hashOfConfig":"73"},{"size":410,"mtime":1683128498874,"results":"136","hashOfConfig":"73"},{"size":3095,"mtime":1683128498874,"results":"137","hashOfConfig":"73"},{"size":5142,"mtime":1683128498874,"results":"138","hashOfConfig":"73"},{"size":1746,"mtime":1683130366089,"results":"139","hashOfConfig":"73"},{"size":1202,"mtime":1683129510358,"results":"140","hashOfConfig":"73"},{"size":274,"mtime":1683128498874,"results":"141","hashOfConfig":"73"},{"size":739,"mtime":1683128498875,"results":"142","hashOfConfig":"73"},{"size":2858,"mtime":1683128498875,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},"gcwu1k",{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323"},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","suppressedMessages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","suppressedMessages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","suppressedMessages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","suppressedMessages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","suppressedMessages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","suppressedMessages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351"},{"filePath":"352","messages":"353","suppressedMessages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355"},{"filePath":"356","messages":"357","suppressedMessages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359"},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363"},{"filePath":"364","messages":"365","suppressedMessages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367"},{"filePath":"368","messages":"369","suppressedMessages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","suppressedMessages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","suppressedMessages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/AssignRole.tsx",["377","378"],[],"import { useState, useEffect, useLayoutEffect, useRef } from \"react\";\nimport tw from \"tailwind-styled-components\";\nimport { setServerRole } from \"../../firebase\";\nimport { RoleData, useServersState } from \"../features/servers\";\nimport {\n  setAssignRoleOpen,\n  setAssignRoleHeight,\n  useServerSettingsState,\n} from \"../features/serverSettings\";\nimport { useAppDispatch } from \"../redux/hooks\";\n\nexport default function AssignRole() {\n  const [leftoverRoles, setLeftoverRoles] = useState<RoleData[]>([]);\n  const { server, member } = useServersState();\n  const { assignRolePosition } = useServerSettingsState();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const dispatch = useAppDispatch();\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n    e.stopPropagation();\n  }\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) return;\n\n    dispatch(\n      setAssignRoleHeight(containerRef.current.getBoundingClientRect().height)\n    );\n  }, [leftoverRoles]);\n\n  useLayoutEffect(() => {\n    if (!member.roles) return setLeftoverRoles(server.roles);\n\n    const leftoverRoles: RoleData[] = [];\n\n    if (!!server.roles)\n      for (const role of server.roles) {\n        if (!member.roles.includes(role)) leftoverRoles.push(role);\n      }\n\n    setLeftoverRoles(leftoverRoles);\n  }, [member]);\n\n  function handleClick(roleID: string) {\n    dispatch(setAssignRoleOpen(false));\n\n    if (!member.roles)\n      return setServerRole(server.serverID, member.userID, [roleID]);\n\n    const newRoles = member.roles.map((role) => role.roleID);\n\n    let duplicate = false;\n\n    for (const role of newRoles) {\n      if (role === roleID) return (duplicate = true);\n    }\n\n    if (duplicate) return;\n\n    newRoles.push(roleID);\n\n    setServerRole(server.serverID, member.userID, newRoles);\n  }\n\n  return (\n    <Container\n      onClick={stopPropagation}\n      ref={containerRef}\n      style={assignRolePosition}\n      $roles={leftoverRoles && leftoverRoles.length > 0 ? true : false}\n    >\n      {leftoverRoles && leftoverRoles.length > 0 ? (\n        <ResultsContainer>\n          {leftoverRoles.map((role, index) => {\n            const RoleColorStyle = {\n              backgroundColor: role.color,\n            };\n\n            return (\n              <RoleContainer\n                onClick={() => handleClick(role.roleID)}\n                key={index}\n              >\n                <RoleColor style={RoleColorStyle} />\n                <RoleName>{role.name}</RoleName>\n              </RoleContainer>\n            );\n          })}\n        </ResultsContainer>\n      ) : (\n        <NoResultsContainer>\n          <Heading>Nope!</Heading>\n        </NoResultsContainer>\n      )}\n    </Container>\n  );\n}\n\ninterface ContainerProps {\n  $roles: boolean;\n}\n\nconst Container = tw.div`\n  absolute w-[250px] min-h-[78px] max-h-[256px] p-2 bg-white border rounded\n  dark:bg-dark-100 dark:border-dark-50/[.48]\n  ${(props: ContainerProps) => (props.$roles ? \"h-[256px]\" : \"h-[78px]\")}\n`;\n\nconst ResultsContainer = tw.div`\n  mt-2 py-2\n`;\n\nconst RoleContainer = tw.li`\n  flex items-center w-[232px] px-2 py-2.5 mb-1 font-medium rounded-md cursor-pointer\n  hover:bg-gray-100\n  dark:hover:bg-text-tertiary\n`;\n\nconst RoleColor = tw.div`\n  flex-none w-3 h-3 rounded-full\n`;\n\nconst RoleName = tw.span`\n  ml-2 font-medium truncate\n  dark:text-text-tertiary\n`;\n\nconst NoResultsContainer = tw.div`\n  flex justify-center p-5\n`;\n\nconst Heading = tw.h4`\n  font-semibold\n  dark:text-white\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/LandingPage.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/LoginForm.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/MemberProfileCard.tsx",["379","380","381"],[],"import tw from \"tailwind-styled-components/dist/tailwind\";\nimport Image from \"next/image\";\nimport {\n  MemberData,\n  setMember,\n  setMemberProfileCardOpen,\n  setMemberProfileCardPosition,\n  useServersState,\n} from \"../features/servers\";\nimport { useAppDispatch } from \"../redux/hooks\";\nimport { useEffect, useLayoutEffect, useRef } from \"react\";\nimport { doc, onSnapshot } from \"firebase/firestore\";\nimport { useUserState } from \"../features/user\";\nimport { db, setServerRole } from \"../../firebase\";\nimport addRoleIcon from \"../../assets/addRoleIcon.svg\";\nimport addRoleIconDark from \"../../assets/addRoleIconDark.svg\";\nimport {\n  setAssignRoleOpen,\n  setAssignRolePosition,\n  useServerSettingsState,\n} from \"../features/serverSettings\";\nimport AssignRole from \"./AssignRole\";\nimport { parseURLs } from \"../utilities/functions\";\nimport { useUserSettingsState } from \"../features/userSettings\";\n\nexport default function MemberProfileCard() {\n  const { user } = useUserState();\n  const { server, member, memberPreview, memberProfileCardPosition } =\n    useServersState();\n  const { assignRoleOpen, assignRoleHeight } = useServerSettingsState();\n  const { theme } = useUserSettingsState();\n  const dispatch = useAppDispatch();\n  const containerRef = useRef<HTMLElement | null>(null);\n  const skippedRender = useRef(false);\n  const addRoleIconRef = useRef<HTMLDivElement | null>(null);\n\n  const onRef = (node: HTMLElement) => {\n    if (node) containerRef.current = node;\n  };\n\n  useEffect(() => {\n    if (skippedRender.current) {\n      return;\n    }\n    skippedRender.current = true;\n  }, []);\n\n  useLayoutEffect(() => {\n    if (\n      !memberProfileCardPosition ||\n      !memberProfileCardPosition.top ||\n      !containerRef.current\n    )\n      return;\n\n    const containerHeight = containerRef.current.getBoundingClientRect().height;\n\n    if (memberProfileCardPosition.top + containerHeight > window.innerHeight) {\n      dispatch(\n        setMemberProfileCardPosition({\n          ...memberProfileCardPosition,\n          top: window.innerHeight - containerHeight - 16,\n        })\n      );\n    }\n  }, [memberProfileCardPosition, onRef]);\n\n  useEffect(() => {\n    if (!memberPreview.userID) return;\n\n    const unsubscribe = onSnapshot(\n      doc(db, \"users\", memberPreview.userID),\n      (doc) => {\n        if (!doc.exists()) return;\n\n        const docData = doc.data();\n\n        const member: MemberData = {\n          username: docData.username,\n\n          tag: docData.tag,\n\n          avatar: docData.avatar,\n\n          about: docData.about,\n\n          banner: docData.banner,\n\n          // permissions: memberPreview.permissions,\n\n          roles: memberPreview.roles || [],\n\n          serverOwner: memberPreview.serverOwner\n            ? memberPreview.serverOwner\n            : false,\n\n          userID: doc.id,\n        };\n\n        dispatch(setMember(member));\n      }\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!addRoleIconRef.current) return;\n\n    const assignRolePositionX =\n      addRoleIconRef.current.getBoundingClientRect().left - 113;\n\n    const assignRolePositionY =\n      addRoleIconRef.current.getBoundingClientRect().top + 32;\n\n    dispatch(\n      setAssignRolePosition({\n        top:\n          assignRolePositionY + assignRoleHeight > window.innerHeight\n            ? addRoleIconRef.current.getBoundingClientRect().top -\n              (assignRoleHeight + 8)\n            : assignRolePositionY,\n        left: assignRolePositionX,\n      })\n    );\n  }, [assignRoleHeight]);\n\n  function closeWindow() {\n    dispatch(setMemberProfileCardOpen(false));\n    dispatch(setAssignRoleOpen(false));\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n    e.stopPropagation();\n  }\n\n  function handleClick() {\n    dispatch(setAssignRoleOpen(!assignRoleOpen));\n  }\n\n  function removeRole(member: MemberData, roleID: string) {\n    if (!user.roles.serverOwner) return;\n\n    const newMember = { ...member };\n\n    const roleIDList = newMember.roles.map((role) => role.roleID);\n\n    const newRoles = roleIDList.filter((role) => role !== roleID);\n\n    setServerRole(server.serverID, member.userID, newRoles);\n  }\n\n  const bannerStyle = {\n    backgroundColor: member.banner,\n  };\n\n  return (\n    <Backdrop onClick={closeWindow}>\n      {skippedRender.current && (\n        <Container\n          onClick={stopPropagation}\n          ref={onRef}\n          style={memberProfileCardPosition}\n        >\n          <Banner style={bannerStyle} />\n\n          <ProfilePicture>\n            <StyledImage\n              loader={() => member.avatar}\n              src={member.avatar}\n              width={80}\n              height={80}\n              unoptimized\n              alt=\"Profile picture\"\n            />\n          </ProfilePicture>\n\n          <ProfileContainer>\n            <UsernameContainer>\n              <Username>{member.username}</Username>\n\n              <Tag>#{member.tag}</Tag>\n            </UsernameContainer>\n\n            <Divider />\n\n            <ProfileDetails>\n              {member.about && (\n                <HeadingContainer>\n                  <ProfileHeading>ABOUT ME</ProfileHeading>\n\n                  <AboutMeContainer>{parseURLs(member.about)}</AboutMeContainer>\n                </HeadingContainer>\n              )}\n\n              <Roles>\n                <ProfileHeading>\n                  {member.roles.length > 0\n                    ? member.roles.length > 1\n                      ? \"ROLES\"\n                      : \"ROLE\"\n                    : \"NO ROLES\"}\n                </ProfileHeading>\n\n                <RolesList>\n                  {member.roles.map((role, index) => {\n                    const RoleColorStyle = {\n                      backgroundColor: role.color,\n                    };\n\n                    return (\n                      <RoleContainer\n                        onClick={() => removeRole(member, role.roleID)}\n                        key={index}\n                      >\n                        <RoleColor style={RoleColorStyle} />\n                        <RoleName>{role.name}</RoleName>\n                      </RoleContainer>\n                    );\n                  })}\n                  <AddRoleIconContainer ref={addRoleIconRef}>\n                    {user.roles.serverOwner && (\n                      <AddRoleIcon\n                        onClick={handleClick}\n                        src={theme === \"dark\" ? addRoleIconDark : addRoleIcon}\n                        width={24}\n                        height={22}\n                      />\n                    )}\n                  </AddRoleIconContainer>\n                </RolesList>\n              </Roles>\n            </ProfileDetails>\n          </ProfileContainer>\n        </Container>\n      )}\n      {assignRoleOpen && <AssignRole />}\n    </Backdrop>\n  );\n}\n\nconst Backdrop = tw.div`\n  fixed w-full h-full z-20\n`;\n\nconst Container = tw.section`\n  absolute flex flex-col w-[21.25rem] bg-gray-200 rounded-lg drop-shadow-xl\n  dark:bg-dark-300 dark:text-white\n`;\n\nconst ProfileContainer = tw.section`\n  flex flex-col m-4 mt-16 bg-white rounded-lg\n  dark:bg-dark-400\n`;\n\nconst Banner = tw.span`\n  h-15 rounded-t-lg\n`;\n\nconst ProfilePicture = tw.div`\n  absolute top-4 left-4 flex border-[7px] border-gray-200 rounded-full\n  dark:text-white dark:border-dark-300\n`;\n\nconst StyledImage = tw(Image)`\n  object-cover rounded-full\n`;\n\nconst UsernameContainer = tw.div`\n  p-3 pb-0 text-xl font-semibold select-text\n`;\n\nconst Username = tw.span`\n  break-all\n`;\n\nconst Tag = tw.span`\n  text-gray-600\n  dark:text-text-primary\n`;\n\nconst Divider = tw.div`\n  h-px m-3 mb-0 bg-gray-200\n  dark:bg-dark-50/[.48]\n`;\n\nconst ProfileDetails = tw.div`\n  pl-4\n  dark:text-text-tertiary\n`;\n\nconst HeadingContainer = tw.div`\n  pt-3\n`;\n\nconst Roles = tw.div`\n  flex flex-col pt-3\n`;\n\nconst RolesList = tw.div`\n  flex\n`;\n\nconst RoleContainer = tw.div`\n  flex h-6 items-center p-1 mr-1 mb-1 rounded bg-gray-100 cursor-pointer\n  hover:bg-gray-100\n  dark:bg-dark-300\n`;\n\nconst RoleColor = tw.div`\n  w-3 h-3 mx-1 rounded-full\n`;\n\nconst RoleName = tw.span`\n  text-xs font-medium\n`;\n\nconst ProfileHeading = tw.h3`\n  mb-2 text-[#060607] text-xs font-bold\n  dark:text-white\n`;\n\nconst AboutMeContainer = tw.div`\n  text-sm select-text\n`;\n\nconst AddRoleIconContainer = tw.div`\n  flex-none mr-1 mb-1\n`;\n\nconst AddRoleIcon = tw(Image)`\n  rounded select-text whitespace-pre-wrap\n  hover:cursor-pointer\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/Members.tsx",["382","383"],[],"import { useEffect, useRef, useState, Fragment } from \"react\";\nimport { query, collection, onSnapshot } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport {\n  useServersState,\n  setMembers,\n  setMemberProfileCardOpen,\n  setMemberProfileCardPosition,\n  setMemberRoles,\n  MemberRole,\n  MemberInfo,\n  RoleData,\n  MemberData,\n  setMemberPreview,\n  RoleListData,\n} from \"../features/servers\";\nimport { useAppDispatch } from \"../redux/hooks\";\nimport Image from \"next/image\";\n\nexport default function Members() {\n  const { server, members, memberRoles, memberProfileCardOpen } =\n    useServersState();\n  const memberRef = useRef<HTMLLIElement[]>([]);\n  const [assignedRoles, setAssignedRoles] = useState<RoleListData[]>([]);\n  const [unassignedRoles, setUnassignedRoles] = useState<MemberData[]>([]);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!server.serverID) return;\n\n    const q = query(collection(db, \"servers\", server.serverID, \"members\"));\n\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const memberRolesList: MemberRole[] = [];\n\n      querySnapshot.forEach((doc) => {\n        const docData = doc.data();\n\n        const memberRoles: MemberRole = {\n          userID: doc.id,\n\n          serverOwner: docData.serverOwner,\n\n          roles: docData.roles,\n\n          // permissions: docData.permissions,\n        };\n\n        memberRolesList.push(memberRoles);\n      });\n\n      dispatch(setMemberRoles(memberRolesList));\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [server]);\n\n  useEffect(() => {\n    const q = query(collection(db, \"users\"));\n\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const memberList: MemberInfo[] = [];\n      const memberIDs: string[] = [];\n\n      const members = getRoles(server.roles, memberRoles);\n\n      members.map((member) => memberIDs.push(member.userID));\n\n      querySnapshot.forEach((doc) => {\n        if (!memberIDs.includes(doc.id)) return;\n\n        const docData = doc.data();\n\n        const member: MemberInfo = {\n          username: docData.username,\n\n          avatar: docData.avatar,\n\n          userID: doc.id,\n        };\n\n        memberList.push(member);\n      });\n\n      memberList.sort((a, b) => a.username.localeCompare(b.username));\n\n      const newMembers = [];\n\n      for (let i = 0; i < memberList.length; i++) {\n        newMembers.push({\n          ...memberList[i],\n          ...members.find((member) => member.userID === memberList[i].userID),\n        });\n      }\n\n      dispatch(setMembers(newMembers));\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [memberRoles]);\n\n  useEffect(() => {\n    const membersWithRoles: MemberData[] = members.filter(\n      (member) => member.roles\n    );\n\n    const membersWithoutRoles: MemberData[] = members.filter(\n      (member) => !member.roles\n    );\n\n    const rolesList: RoleData[] = [];\n\n    for (let i = 0; i < membersWithRoles.length; i++) {\n      const roleLength = membersWithRoles[i].roles.length;\n\n      for (let j = 0; j < roleLength; j++) {\n        rolesList.push(membersWithRoles[i].roles[j]);\n      }\n    }\n\n    const organizedRoles = organizeRoles(\n      Array.from(new Set(rolesList)),\n      membersWithRoles\n    );\n\n    setUnassignedRoles(membersWithoutRoles);\n\n    setAssignedRoles(organizedRoles);\n  }, [members]);\n\n  function getRoles(serverRoles: RoleData[], memberRoles: MemberRole[]) {\n    const newMembers: MemberRole[] = JSON.parse(JSON.stringify(memberRoles));\n\n    const members = newMembers.map((member) => {\n      if (!member.roles || member.roles.length <= 0 || serverRoles.length <= 0)\n        return member;\n\n      for (let i = 0; i < member.roles.length; i++) {\n        for (let j = 0; j < serverRoles.length; j++) {\n          if (member.roles[i] === serverRoles[j].roleID) {\n            member.roles[i] = serverRoles[j];\n          }\n        }\n      }\n      return member;\n    });\n\n    return members;\n  }\n\n  function organizeRoles(\n    rolesList: RoleData[],\n    membersWithRoles: MemberData[]\n  ) {\n    const results: RoleListData[] = [];\n\n    for (const role in rolesList) {\n      const item = {\n        ...rolesList[role],\n        members: [],\n      };\n      results.push(item);\n    }\n\n    for (const role in rolesList) {\n      for (const member in membersWithRoles) {\n        if (\n          rolesList[role].roleID === membersWithRoles[member].roles[0].roleID\n        ) {\n          results[role].members.push(membersWithRoles[member]);\n        }\n      }\n    }\n\n    return results.sort((a, b) => (a.sort < b.sort ? -1 : 1));\n  }\n\n  function viewProfile(member: MemberData, index: number) {\n    dispatch(setMemberProfileCardOpen(!memberProfileCardOpen));\n\n    if (!memberRef.current) return;\n\n    const memberProfileCardY =\n      memberRef.current[index].getBoundingClientRect().top;\n\n    dispatch(setMemberPreview(member));\n\n    dispatch(\n      setMemberProfileCardPosition({ top: memberProfileCardY, right: 248 })\n    );\n  }\n\n  function findLength(array: RoleListData[]) {\n    let sum = 0;\n\n    for (const role of array) {\n      sum += role.members.length;\n    }\n\n    return sum;\n  }\n\n  return (\n    <Container>\n      <Sidebar>\n        <MemberList>\n          {assignedRoles.length\n            ? assignedRoles.map((role, outerIndex) => {\n                const roleStyle = {\n                  color: role.color,\n                };\n                return (\n                  <Fragment key={role.roleID}>\n                    <Heading>\n                      {role.name.toUpperCase()} — {role.members.length}\n                    </Heading>\n\n                    {role.members.map((member, index) => {\n                      return (\n                        <MemberContainer\n                          onClick={() =>\n                            viewProfile(\n                              member,\n                              outerIndex > 0\n                                ? assignedRoles[outerIndex - 1].members.length +\n                                    index\n                                : index\n                            )\n                          }\n                          ref={(el: HTMLLIElement) =>\n                            (memberRef.current[\n                              index +\n                                (outerIndex > 0\n                                  ? assignedRoles[outerIndex - 1].members.length\n                                  : 0)\n                            ] = el)\n                          }\n                          style={roleStyle}\n                          key={member.userID}\n                        >\n                          <Member>\n                            <StyledImage\n                              loader={() => member.avatar}\n                              src={member.avatar}\n                              width={32}\n                              height={32}\n                              unoptimized\n                              alt={`${member.username}'s profile picture`}\n                            />\n                            <UsernameContainer>\n                              <Username>{member.username}</Username>\n\n                              {member.serverOwner && (\n                                <ServerOwnerIcon>&#128081;</ServerOwnerIcon>\n                              )}\n                            </UsernameContainer>\n                          </Member>\n                        </MemberContainer>\n                      );\n                    })}\n                  </Fragment>\n                );\n              })\n            : null}\n          {unassignedRoles.length ? (\n            <>\n              <Heading>ONLINE - {unassignedRoles.length}</Heading>\n              {unassignedRoles.map((member, index) => {\n                return (\n                  <MemberContainer\n                    onClick={() =>\n                      viewProfile(\n                        member,\n                        assignedRoles.length > 0\n                          ? index + findLength(assignedRoles)\n                          : 0\n                      )\n                    }\n                    ref={(el: HTMLLIElement) =>\n                      (memberRef.current[index + findLength(assignedRoles)] =\n                        el)\n                    }\n                    key={member.userID}\n                  >\n                    <Member>\n                      <StyledImage\n                        loader={() => member.avatar}\n                        src={member.avatar}\n                        width={32}\n                        height={32}\n                        unoptimized\n                        alt={`${member.username}'s profile picture`}\n                      />\n                      <UsernameContainer>\n                        <Username>{member.username}</Username>\n\n                        {member.serverOwner && (\n                          <ServerOwnerIcon>&#128081;</ServerOwnerIcon>\n                        )}\n                      </UsernameContainer>\n                    </Member>\n                  </MemberContainer>\n                );\n              })}\n            </>\n          ) : null}\n        </MemberList>\n      </Sidebar>\n    </Container>\n  );\n}\n\nconst Container = tw.div`\n  relative flex-none w-60 h-full bg-gray-100\n  dark:bg-dark-200 dark:text-text-secondary\n`;\n\nconst Sidebar = tw.aside`\n  absolute flex flex-none w-full h-full\n`;\n\nconst MemberList = tw.ol`\n  pb-5 overflow-hidden\n  hover:overflow-y-auto\n`;\n\nconst Heading = tw.h2`\n  pt-6 pr-2 pl-4 text-xs font-semibold\n`;\n\nconst MemberContainer = tw.li`\n  w-56 h-11 ml-2 py-px\n`;\n\nconst Member = tw.div`\n  flex items-center h-full px-2 rounded cursor-pointer\n  hover:bg-gray-200\n  dark:hover:bg-dark-50/40 dark:hover:text-text-tertiary\n`;\n\nconst StyledImage = tw(Image)`\n  object-cover rounded-full\n`;\n\nconst UsernameContainer = tw.div`\n  flex w-[164px] items-center\n`;\n\nconst Username = tw.span`\n  ml-3 overflow-hidden truncate\n`;\n\nconst ServerOwnerIcon = tw.span`\n  ml-1 text-xs\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/RegistrationForm.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/Title.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/UnsavedChanges.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/ViewMedia.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/AboutServer.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/AddServer.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/CreateServer.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/CustomizeServer.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/addServer/JoinServer.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/Channels.tsx",["384","385"],[],"import Image from \"next/image\";\nimport { useEffect } from \"react\";\nimport { useAppDispatch } from \"../../redux/hooks\";\nimport {\n  ChannelData,\n  setChannel,\n  setChannels,\n  useServersState,\n} from \"../../features/servers\";\nimport { query, collection, onSnapshot, doc } from \"firebase/firestore\";\nimport UserPanel from \"./UserPanel\";\nimport Link from \"next/link\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport { db } from \"../../../firebase\";\nimport { useRouter } from \"next/router\";\nimport downArrowIcon from \"../../../assets/downArrowIcon.svg\";\nimport {\n  setServerDropdownOpen,\n  useServerSettingsState,\n} from \"../../features/serverSettings\";\n\nexport default function Channels() {\n  const { server, channels } = useServersState();\n  const { serverDropdownOpen } = useServerSettingsState();\n  const router = useRouter();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!server.serverID) return;\n\n    const q = query(collection(db, \"servers\", server.serverID, \"channels\"));\n\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const channelList: ChannelData[] = [];\n\n      querySnapshot.forEach((doc) => {\n        const docData = doc.data();\n\n        const channel: ChannelData = {\n          name: docData.name,\n\n          topic: docData.topic,\n\n          type: docData.type,\n\n          path: `/channels/${server.serverID}/${doc.id}/`,\n\n          channelID: doc.id,\n        };\n\n        channelList.push(channel);\n      });\n\n      dispatch(setChannels(channelList));\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [server.serverID]);\n\n  useEffect(() => {\n    if (!server.serverID || !server.defaultChannel) return;\n\n    const unsubscribe = onSnapshot(\n      doc(db, \"servers\", server.serverID, \"channels\", server.defaultChannel),\n      (doc) => {\n        const docData = doc.data();\n\n        const channel: ChannelData = {\n          name: docData?.name,\n\n          topic: docData?.topic,\n\n          type: docData?.type,\n\n          path: `${server.serverID}/${doc.id}/`,\n\n          channelID: doc.id,\n        };\n        dispatch(setChannel(channel));\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [server.serverID]);\n\n  function joinChannel(channel: ChannelData) {\n    dispatch(setChannel(channel));\n  }\n\n  function toggleDropdown() {\n    dispatch(setServerDropdownOpen(!serverDropdownOpen));\n  }\n\n  return (\n    <Container>\n      <Header onClick={toggleDropdown}>\n        <Heading>{server.name}</Heading>\n\n        <StyledImage src={downArrowIcon} />\n      </Header>\n\n      <ChannelListContainer>\n        <ChannelList>\n          {channels.map((channel, index) => {\n            return (\n              <Link href={channel.path} key={index} passHref>\n                <a onClick={() => joinChannel(channel)}>\n                  <ChannelContainer channel={channel} path={router.asPath}>\n                    <ChannelIcon>\n                      {channel.type === \"text\" ? \"#\" : \"*\"}\n                    </ChannelIcon>\n                    <ChannelName>{channel.name}</ChannelName>\n                  </ChannelContainer>\n                </a>\n              </Link>\n            );\n          })}\n        </ChannelList>\n      </ChannelListContainer>\n\n      <UserPanel />\n    </Container>\n  );\n}\n\ninterface ChannelProps {\n  channel: ChannelData;\n  path: string;\n}\n\nconst Container = tw.nav`\n  flex flex-col bg-gray-100 w-60 h-full\n  dark:bg-dark-200\n`;\n\nconst ChannelListContainer = tw.div`\n  flex-1 overflow-hidden\n  hover:overflow-y-auto\n`;\n\nconst Header = tw.header`\n  flex flex-none justify-between items-center w-60 h-12 mb-4 px-4 border-b border-gray-300 cursor-pointer\n  dark:border-0 dark:shadow-[0_1px_0_0_rgba(4,4,5,0.2),0_1.5px_0_0_rgba(6,6,7,0.05),0_2px_0_0_rgba(4,4,5,0.05)]\n`;\n\nconst Heading = tw.h1`\n  font-semibold truncate\n  dark:text-white\n`;\n\nconst StyledImage = tw(Image)`\n`;\n\nconst ChannelList = tw.ol`\n`;\n\nconst ChannelContainer = tw.li`\n  flex items-center cursor-pointer py-1 pr-2 mx-2 pl-2 max-h-8 rounded-md\n  ${(props: ChannelProps) =>\n    props.path.includes(props.channel.channelID)\n      ? \"bg-gray-500/[0.24] dark:text-white\"\n      : \"hover:bg-gray-500/[0.08] dark:text-text-secondary\"}\n`;\n\nconst ChannelIcon = tw.span`\n  mr-1.5 text-gray-500 font-bold text-2xl font-thin\n`;\n\nconst ChannelName = tw.span`\n  font-medium truncate\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/DeafenIcon.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/MuteIcon.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/SettingsIcon.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/channels/UserPanel.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/Chat.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/Message.tsx",["386"],[],"import { useState, useEffect, useRef, RefObject } from \"react\";\nimport tw from \"tailwind-styled-components\";\nimport Image from \"next/image\";\nimport {\n  MessageData,\n  setMemberProfileCardPosition,\n  setMemberProfileCardOpen,\n  useServersState,\n  setViewMediaOpen,\n  setViewMedia,\n  MemberData,\n  setMemberPreview,\n} from \"../../features/servers\";\nimport { useUserSettingsState } from \"../../features/userSettings\";\nimport { useAppDispatch } from \"../../redux/hooks\";\nimport { useParseLinks } from \"../../utilities/functions\";\n\ninterface MessageProps {\n  message: MessageData;\n}\n\nexport default function Message(props: MessageProps) {\n  const [sender, setSender] = useState<MemberData>({\n    userID: \"\",\n    username: \"\",\n    avatar:\n      \"https://firebasestorage.googleapis.com/v0/b/banter-69832.appspot.com/o/defaultProfilePicture.svg?alt=media&token=e0ee525e-6ad5-4098-9198-77608ec38f3a\",\n    tag: \"\",\n    about: \"\",\n    banner: \"\",\n    serverOwner: false,\n    roles: [],\n  });\n  const [senderStyle, setSenderStyle] = useState<object>({});\n  const avatarRef = useRef<HTMLDivElement>(null);\n  const messageRef = useRef<HTMLHeadingElement>(null);\n  const { members, memberProfileCardOpen } = useServersState();\n  const { theme } = useUserSettingsState();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const userID = props.message.userID;\n\n    const member = members.find((member) => member.userID === userID);\n\n    if (!member) return;\n\n    setSender(member);\n  }, [props.message.userID, members]);\n\n  function getDate() {\n    const timestamp = props.message.timestamp;\n    const date = new Date(timestamp);\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const monthDay = date.getDate();\n    const day = getDay(date, monthDay);\n\n    let hours = date.getHours();\n    let minutes: number | string = date.getMinutes();\n    let period = \"\";\n\n    if (hours === 12) {\n      period = \"PM\";\n    } else if (hours > 12) {\n      period = \"PM\";\n      hours = hours - 12;\n    } else if (hours === 0) {\n      hours = 12;\n      period = \"AM\";\n    } else {\n      period = \"AM\";\n    }\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    let format = \"\";\n\n    if (day === \"Today\" || day === \"Yesterday\") {\n      format = `${day} at ${hours}:${minutes} ${period}`;\n    } else {\n      format = `${month + 1}/${monthDay}/${year}`;\n    }\n\n    return format;\n  }\n\n  function getDay(dateSent: Date, monthDay: number) {\n    const date = new Date();\n    const today = new Date().getDate();\n\n    if (\n      dateSent.getFullYear() === date.getFullYear() &&\n      dateSent.getMonth() === date.getMonth()\n    ) {\n      switch (monthDay) {\n        case today:\n          return \"Today\";\n        case today - 1:\n          return \"Yesterday\";\n        default:\n          return monthDay;\n      }\n    } else {\n      return monthDay;\n    }\n  }\n\n  function viewProfile(\n    member: MemberData,\n    ref: RefObject<HTMLHeadingElement | HTMLDivElement>\n  ) {\n    dispatch(setMemberProfileCardOpen(!memberProfileCardOpen));\n\n    if (!ref.current) return;\n\n    const memberProfileCardX = ref.current.getBoundingClientRect().right;\n    const memberProfileCardY = ref.current.getBoundingClientRect().top;\n\n    dispatch(setMemberPreview(member));\n\n    dispatch(\n      setMemberProfileCardPosition({\n        top: memberProfileCardY,\n        left: memberProfileCardX + 6,\n      })\n    );\n  }\n\n  function viewMedia(src: string, type: string) {\n    dispatch(setViewMediaOpen(true));\n    dispatch(setViewMedia({ src, type }));\n  }\n\n  useEffect(() => {\n    if (!sender.roles || sender.roles.length <= 0)\n      return setSenderStyle({ color: theme === \"dark\" ? \"#FFF\" : \"#060607\" });\n\n    const senderStyle = {\n      color: sender.roles[0].color,\n    };\n\n    setSenderStyle(senderStyle);\n  }, [sender]);\n\n  return (\n    <Container>\n      <MessageContainer>\n        <ProfilePictureContainer\n          onClick={() => viewProfile(sender, avatarRef)}\n          ref={avatarRef}\n        >\n          <ProfilePicture\n            loader={() => sender.avatar}\n            src={sender.avatar}\n            width={40}\n            height={40}\n            unoptimized\n            alt=\"Profile picture\"\n          />\n        </ProfilePictureContainer>\n\n        <ContentContainer>\n          <MessageContent>\n            <MessageInfo>\n              <Username\n                onClick={() => viewProfile(sender, messageRef)}\n                ref={messageRef}\n                style={senderStyle}\n              >\n                {sender.username}\n              </Username>\n\n              <MessageDate>{getDate()}</MessageDate>\n            </MessageInfo>\n            <Content>{useParseLinks(props.message.content)}</Content>\n          </MessageContent>\n          {props.message.image && (\n            <MessageAccessories>\n              <MessageImage\n                onClick={() => viewMedia(props.message.image, \"image\")}\n                src={props.message.image}\n              />\n            </MessageAccessories>\n          )}\n          {props.message.video && (\n            <MessageAccessories>\n              <MessageVideo\n                onClick={() => viewMedia(props.message.video, \"video\")}\n                src={props.message.video}\n                autoPlay\n                loop\n                preload=\"auto\"\n              />\n            </MessageAccessories>\n          )}\n        </ContentContainer>\n      </MessageContainer>\n    </Container>\n  );\n}\n\nconst Container = tw.li`\n  flex w-full select-text\n`;\n\nconst MessageContainer = tw.div`\n  flex w-full mt-3 py-0.5 pr-12 pl-4\n  hover:bg-gray-50\n  dark:hover:bg-dark-150\n`;\n\nconst ProfilePictureContainer = tw.div`\n  flex-none mt-0.5 cursor-pointer select-none\n`;\n\nconst ContentContainer = tw.div`\n  flex flex-col pl-4\n`;\n\nconst MessageContent = tw.div`\n  flex flex-col\n`;\n\nconst ProfilePicture = tw(Image)`\n  object-cover rounded-full\n`;\n\nconst MessageInfo = tw.div`\n  flex flex-wrap\n  dark:text-text-quaternary\n`;\n\nconst Username = tw.h2`\n  mr-1 text-gray-900 font-semibold cursor-pointer break-all\n  hover:underline hover:decoration-gray-900\n  dark:text-white\n`;\n\nconst MessageDate = tw.span`\n  flex items-center ml-1 text-xs font-medium font-gray-500\n`;\n\nconst Content = tw.div`\n  font-medium text-gray-800\n  dark:text-text-tertiary\n`;\n\nconst MessageAccessories = tw.div`\n  flex w-full h-full max-w-[400px] max-h-[300px] py-0.5\n`;\n\nconst MessageImage = tw.img`\n  object-contain rounded-middle cursor-pointer\n`;\n\nconst MessageVideo = tw.video`\n  object-contain rounded-middle cursor-pointer\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/Messages.tsx",["387"],[],"import { useEffect, useLayoutEffect, useRef } from \"react\";\nimport { useAppDispatch } from \"../../redux/hooks\";\nimport {\n  setMessages,\n  useServersState,\n  MessageData,\n} from \"../../features/servers\";\nimport { useUserSettingsState } from \"../../features/userSettings\";\nimport tw from \"tailwind-styled-components\";\nimport Message from \"./Message\";\nimport { query, collection, onSnapshot } from \"firebase/firestore\";\nimport { db } from \"../../../firebase\";\n\nexport default function Messages() {\n  const { server, channel, messages } = useServersState();\n  const { theme } = useUserSettingsState();\n  const scrollRef = useRef<any>();\n  const dispatch = useAppDispatch();\n\n  useLayoutEffect(() => {\n    if (!scrollRef.current) return;\n\n    scrollRef.current.scrollIntoView();\n  }, [messages]);\n\n  useEffect(() => {\n    if (!server.serverID || !channel.channelID) return;\n\n    const q = query(\n      collection(\n        db,\n\n        \"servers\",\n\n        server.serverID,\n\n        \"channels\",\n\n        channel.channelID,\n\n        \"messages\"\n      )\n    );\n\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const messageList: MessageData[] = [];\n\n      querySnapshot.forEach((doc) => {\n        const docData = doc.data();\n\n        const message: MessageData = {\n          content: docData.content,\n\n          userID: docData.userID,\n\n          date: docData.date,\n\n          timestamp: docData.timestamp,\n\n          reactions: docData.reactions,\n\n          edited: docData.edited,\n\n          image: docData.image,\n\n          video: docData.video,\n        };\n\n        messageList.push(message);\n      });\n\n      messageList.sort((a, b) => {\n        return a.timestamp - b.timestamp;\n      });\n\n      dispatch(setMessages(messageList));\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [channel.channelID]);\n\n  return (\n    <Container\n      style={{\n        scrollbarColor:\n          theme === \"dark\" ? \"#202225 #2F3136\" : \"#E3E5E8 #F2F3F5\",\n      }}\n    >\n      <List>\n        <WelcomeMessage>\n          <Heading>Welcome to #{channel.name}!</Heading>\n          <Subtext>This is the start of the #{channel.name} channel.</Subtext>\n        </WelcomeMessage>\n\n        {messages.length > 0 && <Separator />}\n\n        {messages.map((message, index) => {\n          return <Message message={message} key={index} />;\n        })}\n\n        <Scroll ref={scrollRef} />\n      </List>\n    </Container>\n  );\n}\n\nconst Container = tw.div`\n  absolute flex w-full h-full overflow-x-clip overflow-y-scroll break-words whitespace-pre-wrap\n`;\n\nconst List = tw.ol`\n  flex flex-col flex-1 mt-auto pr-1\n`;\n\nconst WelcomeMessage = tw.div`\n  m-4 select-none\n`;\n\nconst Heading = tw.h1`\n  my-2 font-bold text-double text-ellipsis\n  dark:text-white\n`;\n\nconst Subtext = tw.span`\n  text-gray-500\n  dark:text-text-primary\n`;\n\nconst Separator = tw.div`\n  flex h-0 mr-3.5 mt-2 mb-2 ml-4 border-t border-gray-300\n  dark:border-dark-50/[.48]\n`;\n\nconst Scroll = tw.span`\n  w-px h-3\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/SendGif.tsx",["388","389"],[],"import { useEffect, useRef, useState } from \"react\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport { createGifMessage } from \"../../../firebase\";\nimport { setSendGifOpen } from \"../../features/sendGif\";\nimport { useServersState } from \"../../features/servers\";\nimport { useUserState } from \"../../features/user\";\nimport { useAppDispatch } from \"../../redux/hooks\";\nimport Image from \"next/image\";\n\ninterface GifData {\n  content_description: string;\n  id: string;\n  url: string;\n  media: [\n    {\n      loopedmp4: {\n        url: string;\n      };\n    }\n  ];\n}\n\ninterface CategoryData {\n  image: string;\n  path: string;\n  searchterm: string;\n}\n\nexport default function SendGif() {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<GifData[] | null>(null);\n  const [categories, setCategories] = useState<CategoryData[]>([]);\n  const { server, channel } = useServersState();\n  const { user } = useUserState();\n  const inputRef = useRef<HTMLInputElement>();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!searchInput) return setSearchResults(null);\n    const url = `https://g.tenor.com/v1/search?q=${searchInput}&key=${process.env.NEXT_PUBLIC_TENOR_API_KEY}&limit=8&contentfilter=${server.contentFilter}`;\n    fetchGifs(url);\n  }, [searchInput]);\n\n  useEffect(() => {\n    if (searchResults) return;\n    fetchCategories();\n  }, [searchResults]);\n\n  async function fetchGifs(url: string) {\n    const fetchedGifs = await fetch(url);\n    const gifsData = await fetchedGifs.json();\n    setSearchResults(gifsData.results);\n  }\n\n  async function fetchCategories() {\n    const baseURL = `https://g.tenor.com/v1/categories?&key=${process.env.NEXT_PUBLIC_TENOR_API_KEY}&limit=8&contentfilter=${server.contentFilter}`;\n    const fetchedGifs = await fetch(baseURL);\n    const gifsData = await fetchedGifs.json();\n    setCategories(gifsData.tags);\n  }\n\n  function closeWindow() {\n    dispatch(setSendGifOpen(false));\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n    e.stopPropagation();\n  }\n\n  function sendGif(url: string) {\n    createGifMessage(server.serverID, channel.channelID, user.userID, url);\n    closeWindow();\n  }\n\n  async function openCategory(category: string) {\n    const url = `https://g.tenor.com/v1/search?q=${category}&key=${process.env.NEXT_PUBLIC_TENOR_API_KEY}&limit=8&contentfilter=${server.contentFilter}`;\n\n    await fetchGifs(url);\n\n    if (!inputRef.current) return;\n    setSearchInput(category);\n    inputRef.current.value = category;\n  }\n\n  return (\n    <Backdrop onClick={closeWindow}>\n      <Container onClick={stopPropagation}>\n        <GifPicker>\n          <Header>\n            <GifSearchContainer>\n              <GifSearch\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setSearchInput(e.target.value)\n                }\n                ref={inputRef}\n                type=\"text\"\n                placeholder=\"Search Tenor\"\n              />\n            </GifSearchContainer>\n          </Header>\n\n          <ContentContainer style={{ scrollbarWidth: \"thin\" }}>\n            <GifContainer>\n              {!searchResults\n                ? categories &&\n                  categories.map((result, index) => {\n                    const url = result.image;\n\n                    return (\n                      <CategoryContainer\n                        onClick={() => openCategory(result.searchterm)}\n                        key={index}\n                      >\n                        <CategoryBackdrop />\n                        <CategoryText>{result.searchterm}</CategoryText>\n                        <GifCategory\n                          loader={() => url}\n                          src={url}\n                          width={231}\n                          height={110}\n                          unoptimized\n                        />\n                      </CategoryContainer>\n                    );\n                  })\n                : searchResults.map((result) => {\n                    const url = result.media[0].loopedmp4.url;\n\n                    return (\n                      <Gif\n                        onClick={() => sendGif(url)}\n                        src={url}\n                        autoPlay\n                        loop\n                        preload=\"auto\"\n                        key={result.id}\n                      />\n                    );\n                  })}\n            </GifContainer>\n          </ContentContainer>\n        </GifPicker>\n      </Container>\n    </Backdrop>\n  );\n}\n\nconst Backdrop = tw.div`\n  absolute w-full h-full z-50\n`;\n\nconst Container = tw.section`\n  absolute right-4 bottom-0 w-[498px] h-[498px] bg-gray-100 rounded-lg drop-shadow-lg\n  dark:bg-dark-200\n`;\n\nconst GifPicker = tw.div`\n  flex flex-col pt-4 w-full h-full\n`;\n\nconst Header = tw.header`\n  px-4 pb-3 h-[46px] shadow-[0_1px_0_0_rgba(185,187,190,0.3)]\n  dark:shadow-[0_1px_0_0_rgba(24,25,28,0.3),0_1px_2px_0_rgba(24,25,28,0.3)]\n`;\n\nconst GifSearchContainer = tw.div`\n  flex w-full h-[34px] bg-gray-200 rounded-middle\n  dark:bg-dark-400 dark:text-text-tertiary\n`;\n\nconst GifSearch = tw.input`\n  w-full h-[30px] m-px px-2 bg-transparent placeholder-gray-500 outline-none\n`;\n\nconst ContentContainer = tw.div`\n  relative w-full h-full p-[11px] overflow-hidden\n  hover:overflow-y-scroll\n`;\n\nconst GifContainer = tw.div`\n  absolute flex flex-wrap gap-3\n`;\n\nconst CategoryContainer = tw.div`\n  relative w-[231px] h-[110px] rounded-[5px] cursor-pointer\n  hover:outline hover:outline-2 hover:outline-primary hover:drop-shadow-md\n`;\n\nconst CategoryBackdrop = tw(Backdrop)`\n  absolute bg-black/[0.4] rounded-[5px]\n`;\n\nconst CategoryText = tw.span`\n  absolute w-max top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-white font-semibold z-50\n`;\n\nconst GifCategory = tw(Image)`\n  object-cover rounded-[5px]\n`;\n\nconst Gif = tw.video`\n  w-[231px] h-fit rounded-[5px] object-cover cursor-pointer\n  hover:outline hover:outline-2 hover:outline-primary hover:drop-shadow-md\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/textArea/GifIcon.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/textArea/TextArea.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/chat/textArea/UploadImageIcon.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverDropdown/CreateChannel.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverDropdown/InviteFriends.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverDropdown/ServerDropdown.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/ServerSettings.tsx",["390"],[],"import tw from \"tailwind-styled-components/dist/tailwind\";\nimport ServerSettingsSidebar from \"./ServerSettingsSidebar\";\nimport ServerSettingsView from \"./serverSettingsView/ServerSettingsView\";\nimport Image from \"next/image\";\nimport closeButton from \"../../../assets/closeButton.svg\";\nimport { useAppDispatch } from \"../../redux/hooks\";\nimport { useEffect } from \"react\";\nimport {\n  setServerSettingsOpen,\n  setServerCopy,\n  setServerSettingsScreen,\n  useServerSettingsState,\n} from \"../../features/serverSettings\";\nimport { useServersState } from \"../../features/servers\";\nimport { setUnsavedChangesError } from \"../../features/userSettings\";\n\nexport default function ServerSettings() {\n  const { server } = useServersState();\n  const { serverCopy } = useServerSettingsState();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(setServerCopy(server));\n  }, []);\n\n  function unsavedChanges() {\n    if (!serverCopy) return false;\n\n    if (serverCopy !== server) {\n      dispatch(setUnsavedChangesError(true));\n\n      setTimeout(() => {\n        dispatch(setUnsavedChangesError(false));\n      }, 1500);\n\n      return true;\n    }\n  }\n\n  function closeWindow() {\n    if (unsavedChanges()) return;\n\n    dispatch(setServerSettingsOpen(false));\n    dispatch(setServerSettingsScreen(\"Overview\"));\n  }\n\n  return (\n    <Container>\n      <ServerSettingsSidebar />\n\n      <SettingsContainer>\n        <ServerSettingsView />\n\n        <CloseButton>\n          <StyledImage\n            onClick={closeWindow}\n            src={closeButton}\n            width={36}\n            height={36}\n            alt={\"Close button\"}\n          />\n\n          <Caption>ESC</Caption>\n        </CloseButton>\n      </SettingsContainer>\n    </Container>\n  );\n}\n\nconst Container = tw.div`\n  flex flex-none w-screen h-screen select-none\n  dark:bg-dark-100\n`;\n\nconst SettingsContainer = tw.div`\n  relative flex w-full h-full\n`;\n\nconst CloseButton = tw.figure`\n  flex-none pt-15 text-center mr-5\n`;\n\nconst StyledImage = tw(Image)`\n  cursor-pointer\n`;\n\nconst Caption = tw.figcaption`\n  text-[13px] text-gray-300 font-semibold\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/ServerSettingsSidebar.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/ServerModeration.tsx",["391"],[],"import { useEffect, useRef } from \"react\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport {\n  setServerContentFilter,\n  useServersState,\n} from \"../../../features/servers\";\nimport {\n  setServerChangesMade,\n  useServerSettingsState,\n} from \"../../../features/serverSettings\";\nimport { useAppDispatch } from \"../../../redux/hooks\";\n\nexport default function ServerModeration() {\n  const offInputRef = useRef<HTMLInputElement>(null);\n  const lowInputRef = useRef<HTMLInputElement>(null);\n  const mediumInputRef = useRef<HTMLInputElement>(null);\n  const highInputRef = useRef<HTMLInputElement>(null);\n  const { server } = useServersState();\n  const { serverCopy } = useServerSettingsState();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (\n      !offInputRef.current ||\n      !lowInputRef.current ||\n      !mediumInputRef.current ||\n      !highInputRef.current\n    )\n      return;\n    switch (server.contentFilter) {\n      case \"off\":\n        offInputRef.current.checked = true;\n        break;\n      case \"low\":\n        lowInputRef.current.checked = true;\n        break;\n      case \"medium\":\n        mediumInputRef.current.checked = true;\n        break;\n      case \"high\":\n        highInputRef.current.checked = true;\n        break;\n    }\n  });\n\n  useEffect(() => {\n    if (!serverCopy) return;\n\n    if (server !== serverCopy) {\n      dispatch(setServerChangesMade(true));\n    } else {\n      dispatch(setServerChangesMade(false));\n    }\n  }, [server, serverCopy]);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const newContentFilter = e.target.value;\n    dispatch(setServerContentFilter(newContentFilter));\n  }\n\n  return (\n    <Container>\n      <Heading>Moderation</Heading>\n\n      <ServerSettings>\n        <SubHeading>EXPLICIT MEDIA CONTENT FILTER</SubHeading>\n\n        <SubTextContainer>\n          <SubText>\n            Automatically prevent sharing gifs sent in this server that contains\n            explicit content. Please choose how broadly the filter will apply to\n            members in your server.{\" \"}\n            <Bold>We recommend setting a filter for a public Banter.</Bold>\n          </SubText>\n        </SubTextContainer>\n\n        <SettingsContainer>\n          <SettingContainer\n            className={\n              server.contentFilter === \"off\"\n                ? \"bg-gray-200\"\n                : \"bg-gray-100 hover:bg-gray-100/75\"\n            }\n          >\n            <SettingInput\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                handleChange(e)\n              }\n              name=\"contentFilter\"\n              value=\"off\"\n              ref={offInputRef}\n              id=\"off\"\n              type=\"radio\"\n            />\n            <SettingInputLabel htmlFor=\"off\">\n              <SettingLabelText>\n                {\"Don't scan any media content.\"}\n              </SettingLabelText>\n              <SettingLabelSubText>\n                My friends are nice most of the time.\n              </SettingLabelSubText>\n            </SettingInputLabel>\n          </SettingContainer>\n\n          <SettingContainer\n            className={\n              server.contentFilter === \"low\"\n                ? \"bg-gray-200\"\n                : \"bg-gray-100 hover:bg-gray-100/75\"\n            }\n          >\n            <SettingInput\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                handleChange(e)\n              }\n              name=\"contentFilter\"\n              value=\"low\"\n              ref={lowInputRef}\n              id=\"low\"\n              type=\"radio\"\n            />\n            <SettingInputLabel htmlFor=\"low\">\n              <SettingLabelText>Keep a low filter.</SettingLabelText>\n              <SettingLabelSubText>\n                Gets rid of the harder stuff.\n              </SettingLabelSubText>\n            </SettingInputLabel>\n          </SettingContainer>\n\n          <SettingContainer\n            className={\n              server.contentFilter === \"medium\"\n                ? \"bg-gray-200\"\n                : \"bg-gray-100 hover:bg-gray-100/75\"\n            }\n          >\n            <SettingInput\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                handleChange(e)\n              }\n              name=\"contentFilter\"\n              value=\"medium\"\n              ref={mediumInputRef}\n              id=\"medium\"\n              type=\"radio\"\n            />\n            <SettingInputLabel htmlFor=\"medium\">\n              <SettingLabelText>\n                Filter out some media content.\n              </SettingLabelText>\n              <SettingLabelSubText>\n                Helps keep everything PG-rated.\n              </SettingLabelSubText>\n            </SettingInputLabel>\n          </SettingContainer>\n\n          <SettingContainer\n            className={\n              server.contentFilter === \"high\"\n                ? \"bg-gray-200\"\n                : \"bg-gray-100 hover:bg-gray-100/75\"\n            }\n          >\n            <SettingInput\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                handleChange(e)\n              }\n              name=\"contentFilter\"\n              value=\"high\"\n              ref={highInputRef}\n              id=\"high\"\n              type=\"radio\"\n            />\n            <SettingInputLabel htmlFor=\"high\">\n              <SettingLabelText>Safe space.</SettingLabelText>\n              <SettingLabelSubText>\n                Recommended option for when you want that squeaky clean shine.\n              </SettingLabelSubText>\n            </SettingInputLabel>\n          </SettingContainer>\n        </SettingsContainer>\n      </ServerSettings>\n    </Container>\n  );\n}\n\nconst Container = tw.main`\n  min-w-[542px] max-w-[740px] pt-15 px-10 pb-20\n`;\n\nconst Heading = tw.h2`\n  mb-5 text-xl font-semibold\n  dark:text-white\n`;\n\nconst ServerSettings = tw.section`\n  flex flex-col\n`;\n\nconst SubHeading = tw.h5`\n  mb-2 text-xs text-gray-800 font-semibold\n  dark:text-white\n`;\n\nconst SubTextContainer = tw.div`\n  mb-4\n`;\n\nconst SubText = tw.span`\n  text-sm text-gray-600 font-medium\n  dark:text-text-primary\n`;\n\nconst Divider = tw.div`\n  max-w-165 h-px border-t mt-10 border-gray-900/[0.08]\n`;\n\nconst Bold = tw(SubText)`\n  font-[600]\n`;\n\nconst SettingsContainer = tw.div`\n  flex flex-col max-w-[660px]\n`;\n\nconst SettingContainer = tw.div`\n  flex items-center mb-2 p-2.5 rounded-middle cursor-pointer\n  dark:bg-dark-50/40 dark:text-white\n`;\n\nconst SettingInput = tw.input`\n  w-5 h-5 cursor-pointer accent-black\n  dark:accent-white\n`;\n\nconst SettingInputLabel = tw.label`\n  flex flex-col w-full mr-2 ml-4 cursor-pointer\n`;\n\nconst SettingLabelText = tw.span`\n`;\n\nconst SettingLabelSubText = tw(SettingLabelText)`\n  dark:text-text-primary\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/ServerOverview.tsx",["392"],[],"import Image from \"next/image\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useRef } from \"react\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport { uploadServerImagePreview } from \"../../../../firebase\";\nimport {\n  setServerImage,\n  setServerName,\n  useServersState,\n} from \"../../../features/servers\";\nimport {\n  setServerChangesMade,\n  setServerIconPreview,\n  useServerSettingsState,\n} from \"../../../features/serverSettings\";\nimport { useUserState } from \"../../../features/user\";\nimport { useAppDispatch } from \"../../../redux/hooks\";\nimport DefaultServerIcon from \"../../servers/DefaultServerIcon\";\n\nexport default function ServerOverview() {\n  const inputRef = useRef<HTMLInputElement>();\n  const fileRef = useRef<HTMLInputElement>();\n  const { user } = useUserState();\n  const { server } = useServersState();\n  const { serverCopy } = useServerSettingsState();\n  const router = useRouter();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!serverCopy) return;\n\n    if (server !== serverCopy) {\n      dispatch(setServerChangesMade(true));\n    } else {\n      dispatch(setServerChangesMade(false));\n    }\n  }, [server, serverCopy]);\n\n  function handleChange() {\n    if (!inputRef.current) return;\n\n    dispatch(setServerName(inputRef.current.value));\n  }\n\n  function handleClick() {\n    if (!fileRef.current) return;\n\n    fileRef.current.click();\n  }\n\n  async function changeIcon(e: React.ChangeEvent<HTMLInputElement>) {\n    if (!e.target.files) return;\n\n    const iconImage = e.target.files[0];\n\n    const iconURL = await uploadServerImagePreview(iconImage, user.userID);\n\n    dispatch(setServerImage(iconURL));\n    dispatch(setServerIconPreview(iconImage));\n  }\n\n  function removeIcon() {\n    dispatch(setServerImage(\"\"));\n    dispatch(setServerIconPreview(null));\n  }\n\n  return (\n    <Container>\n      <Heading>Server Overview</Heading>\n\n      <ServerSettings>\n        <UploadIconContainer>\n          <ServerIconDisplay>\n            <ServerIconContainer onClick={handleClick}>\n              <HoverTextBackdrop>\n                <HoverText>CHANGE</HoverText>\n                <HoverText>ICON</HoverText>\n              </HoverTextBackdrop>\n\n              {server.img ? (\n                <StyledImage\n                  loader={() => server.img}\n                  src={server.img}\n                  width={100}\n                  height={100}\n                  unoptimized\n                />\n              ) : (\n                <ServerIcon\n                  server={server}\n                  width={100}\n                  height={100}\n                  path={router.asPath}\n                />\n              )}\n            </ServerIconContainer>\n\n            {server.img ? (\n              <SubText onClick={removeIcon}>Remove</SubText>\n            ) : (\n              <SmallText>\n                Minimum Size: <Bold>128x128</Bold>\n              </SmallText>\n            )}\n          </ServerIconDisplay>\n\n          <UploadImageContainer>\n            <UploadImageText>\n              We recommend an image of at least 512x512 for the server.\n            </UploadImageText>\n\n            <UploadImageButton>\n              Upload Image\n              <FileInput\n                onChange={changeIcon}\n                type=\"file\"\n                accept=\".svg, .png, .jpg, .jpeg\"\n                ref={fileRef}\n              />\n            </UploadImageButton>\n          </UploadImageContainer>\n        </UploadIconContainer>\n\n        <ServerNameInputContainer>\n          <ServerNameInputLabel>SERVER NAME</ServerNameInputLabel>\n\n          <ServerNameInput\n            type=\"text\"\n            value={server.name}\n            onChange={handleChange}\n            ref={inputRef}\n          />\n        </ServerNameInputContainer>\n      </ServerSettings>\n      <Divider />\n    </Container>\n  );\n}\n\nconst Container = tw.main`\n  min-w-[542px] max-w-[740px] pt-15 px-10 pb-20\n`;\n\nconst Heading = tw.h2`\n  mb-5 text-xl font-semibold\n  dark:text-white\n`;\n\nconst ServerSettings = tw.section`\n  flex\n`;\n\nconst UploadIconContainer = tw.div`\n  flex mr-2.5\n`;\n\nconst SubText = tw.a`\n  mt-2.5 text-sm text-gray-600 font-semibold leading-[14px] cursor-pointer\n  dark:text-text-primary\n`;\n\nconst Divider = tw.div`\n  max-w-165 h-px border-t mt-10 border-gray-900/[0.08]\n`;\n\nconst ServerIconDisplay = tw.div`\n  flex flex-col items-center text-center mr-2.5\n`;\n\nconst ServerIconContainer = tw.div`\n  relative w-[100px] h-[100px] drop-shadow-xl group cursor-pointer\n`;\n\nconst HoverTextBackdrop = tw.div`\n  absolute hidden w-full h-full bg-black/50 rounded-full z-10 group pointer-events-none leading-3\n  group-hover:flex group-hover:flex-col group-hover:justify-center\n`;\n\nconst HoverText = tw.span`\n  text-[10px] text-white font-bold\n`;\n\nconst SmallText = tw.small`\n  mt-2.5 text-gray-500 text-[10px] leading-[10px]\n`;\n\nconst Bold = tw(SmallText)`\n  font-bold\n`;\n\nconst UploadImageContainer = tw.div`\n  flex flex-col ml-2.5 min-w-[128px] max-w-[180px]\n`;\n\nconst UploadImageText = tw.span`\n  mb-2 text-sm text-gray-600 font-medium\n  dark:text-text-primary\n`;\n\nconst UploadImageButton = tw.button`\n  relative mt-2 px-4 py-0.5 w-fit h-[38px] text-sm text-gray-500 border border-gray-500 rounded-[3px]\n  dark:border-dark-50 dark:text-white\n`;\n\nconst FileInput = tw.input`\n  absolute top-0 left-0 w-full h-full text-[0] cursor-pointer\n  file:border-0 file:bg-transparent\n`;\n\nconst ServerIcon = tw(DefaultServerIcon)`\n  fill-primary rounded-full text-black text-[40px] group\n  group-hover:text-[0]\n`;\n\nconst StyledImage = tw(Image)`\n  rounded-full\n`;\n\nconst ServerNameInputContainer = tw.div`\n  flex flex-col mb-5 ml-2.5 min-w-[206px] w-[320px] max-w-[320px]\n`;\n\nconst ServerNameInputLabel = tw.label`\n  mb-2 text-xs text-gray-800 font-semibold\n  dark:text-text-primary\n`;\n\nconst ServerNameInput = tw.input`\n  w-full h-10 p-2.5 rounded-middle text-gray-800 font-medium bg-gray-50\n  dark:bg-dark-400 dark:text-text-tertiary\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/ServerSettingsView.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/serverRoles/ServerRoles.tsx",["393","394"],[],"import { useEffect } from \"react\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport { createServerRole } from \"../../../../../firebase\";\nimport { setServer, useServersState } from \"../../../../features/servers\";\nimport {\n  setCurrentRole,\n  setEditRoleOpen,\n  setRolesCopy,\n  setServerChangesMade,\n  setServerCopy,\n  useServerSettingsState,\n} from \"../../../../features/serverSettings\";\nimport { useAppDispatch } from \"../../../../redux/hooks\";\nimport ServerRolesSidebar from \"./ServerRolesSidebar\";\nimport ServerEditRole from \"./SeverEditRole\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default function ServerRoles() {\n  const { server } = useServersState();\n  const { serverCopy, editRoleOpen, serverChangesMade } =\n    useServerSettingsState();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(setRolesCopy(server.roles));\n  }, []);\n\n  useEffect(() => {\n    if (!serverCopy) return;\n\n    if (server !== serverCopy) {\n      dispatch(setServerChangesMade(true));\n    } else {\n      dispatch(setServerChangesMade(false));\n    }\n  }, [server, serverCopy]);\n\n  function createRole() {\n    if (!serverCopy) return;\n\n    const newRoleID = uuidv4();\n    createServerRole(serverCopy, newRoleID);\n\n    dispatch(setEditRoleOpen(true));\n\n    const newServer = { ...server };\n\n    const serverVersion = { ...serverCopy };\n\n    newServer.roles = server.roles\n      ? [\n          ...server.roles,\n          {\n            name: \"new role\",\n            color: \"#99AAB5\",\n            separateDisplay: false,\n            sort: server.roles.length,\n            permissions: {\n              manageChannels: false,\n              manageRoles: false,\n              manageServer: false,\n            },\n            roleID: newRoleID,\n          },\n        ]\n      : [\n          {\n            name: \"new role\",\n            color: \"#99AAB5\",\n            separateDisplay: false,\n            sort: 0,\n            permissions: {\n              manageChannels: false,\n              manageRoles: false,\n              manageServer: false,\n            },\n            roleID: newRoleID,\n          },\n        ];\n\n    serverVersion.roles = serverCopy.roles\n      ? [\n          ...serverCopy.roles,\n          {\n            name: \"new role\",\n            color: \"#99AAB5\",\n            separateDisplay: false,\n            sort: server.roles.length,\n            permissions: {\n              manageChannels: false,\n              manageRoles: false,\n              manageServer: false,\n            },\n            roleID: newRoleID,\n          },\n        ]\n      : [\n          {\n            name: \"new role\",\n            color: \"#99AAB5\",\n            separateDisplay: false,\n            sort: 0,\n            permissions: {\n              manageChannels: false,\n              manageRoles: false,\n              manageServer: false,\n            },\n            roleID: newRoleID,\n          },\n        ];\n\n    const role = newServer.roles.find(\n      (role) => role.sort === newServer.roles.length - 1\n    );\n\n    dispatch(setCurrentRole(role));\n\n    dispatch(setServer(newServer));\n\n    if (serverChangesMade) return dispatch(setServerCopy(serverVersion));\n\n    dispatch(setServerCopy(newServer));\n  }\n\n  function editRole(sort: number) {\n    const role = server.roles.find((role) => role.sort === sort);\n\n    dispatch(setCurrentRole(role));\n    dispatch(setEditRoleOpen(true));\n  }\n\n  return editRoleOpen ? (\n    <EditContainer>\n      <ServerRolesSidebar />\n      <ServerEditRole />\n    </EditContainer>\n  ) : (\n    <Container>\n      <Heading>ROLES</Heading>\n\n      <ServerSettings>\n        <SubHeading>Organize your members</SubHeading>\n\n        <SubTextContainer>\n          <SubText>\n            Use roles to organize your server members and customize their\n            permissions.\n          </SubText>\n        </SubTextContainer>\n\n        <CreateRoleButton onClick={createRole}>Create Role</CreateRoleButton>\n      </ServerSettings>\n\n      <Divider />\n\n      {server.roles &&\n        server.roles.map((role, index) => {\n          const RoleColorStyle = {\n            backgroundColor: role.color,\n          };\n\n          return (\n            <RoleContainer onClick={() => editRole(role.sort)} key={index}>\n              <RoleColor style={RoleColorStyle} />\n              <RoleName>{role.name}</RoleName>\n            </RoleContainer>\n          );\n        })}\n    </Container>\n  );\n}\n\nconst Container = tw.main`\n  min-w-[542px] max-w-[740px] pt-15 px-10 pb-20\n`;\n\nconst EditContainer = tw.main`\n  flex min-w-[524px] max-w-[740px] pr-10\n`;\n\nconst Heading = tw.h2`\n  mb-5 font-semibold\n  dark:text-white\n`;\n\nconst ServerSettings = tw.section`\n  flex flex-col items-center\n`;\n\nconst SubHeading = tw.h3`\n  mb-2 text-2xl text-gray-800 font-semibold\n  dark:text-white\n`;\n\nconst SubTextContainer = tw.div`\n  mb-4\n`;\n\nconst SubText = tw.span`\n  text-sm text-gray-600 font-medium\n  dark:text-text-primary\n`;\n\nconst CreateRoleButton = tw.button`\n  w-fit h-[34px] px-4 py-0.5 bg-channel-link rounded-middle text-sm text-white font-medium\n`;\n\nconst Divider = tw.div`\n  max-w-165 h-px border-t my-8 border-gray-900/[0.08]\n`;\n\nconst RoleContainer = tw.div`\n  flex w-[700px] h-15 items-center rounded border-y border-gray-100 cursor-pointer\n  hover:bg-gray-100\n  dark:border-dark-50/[.48]\n`;\n\nconst RoleColor = tw.div`\n  w-3 h-3 mr-2.5 rounded-full\n`;\n\nconst RoleName = tw.span`\n  dark:text-white\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/serverRoles/ServerRolesSidebar.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/serverSettings/serverSettingsView/serverRoles/SeverEditRole.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/servers/AddServerIcon.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/servers/DefaultServerIcon.tsx",["395"],[],"import { SVGProps, useEffect, useState } from \"react\";\nimport { ServerData } from \"../../features/servers\";\n\ninterface DefaultServerIconProps extends SVGProps<SVGSVGElement> {\n  server: ServerData;\n  path: string;\n}\n\nexport default function DefaultServerIcon(props: DefaultServerIconProps) {\n  const [initials, setInitials] = useState(\"\");\n\n  useEffect(() => {\n    getInitials();\n  }, [props.server.name]);\n\n  function getInitials() {\n    const string = props.server.name;\n    const matches = string.replace(\"'\", \"\").match(/\\b(\\w)/g);\n\n    if (!matches) return setInitials(\"\");\n\n    const initials = matches.join(\"\");\n    setInitials(initials);\n  }\n\n  return (\n    <svg width={512} height={512} xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n      <rect width={512} height={512} />\n      <text\n        className={`front-medium group-hover:fill-white dark:fill-text-tertiary\n        ${\n          props.path.includes(props.server.serverID)\n            ? \"fill-white\"\n            : \"fill-gray-800\"\n        }`}\n        x=\"50%\"\n        y=\"50%\"\n        dominantBaseline=\"middle\"\n        textAnchor=\"middle\"\n      >\n        {initials}\n      </text>\n    </svg>\n  );\n}\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/servers/Servers.tsx",["396","397"],[],"import Link from \"next/link\";\nimport { useEffect } from \"react\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport { useAppDispatch } from \"../../redux/hooks\";\nimport {\n  ServerData,\n  setServers,\n  setServer,\n  useServersState,\n  resetServerState,\n  setServerIDs,\n} from \"../../features/servers\";\nimport { query, collection, onSnapshot } from \"firebase/firestore\";\nimport { db } from \"../../../firebase\";\nimport Image from \"next/image\";\nimport banterIcon from \"../../../assets/banterIcon.svg\";\nimport DefaultServerIcon from \"./DefaultServerIcon\";\nimport { useUserState } from \"../../features/user\";\nimport { useRouter } from \"next/router\";\nimport AddServerIcon from \"./AddServerIcon\";\nimport { setAddServerOpen } from \"../../features/addServer\";\n\nexport default function Servers() {\n  const { servers, serverIDs } = useServersState();\n  const { user } = useUserState();\n  const router = useRouter();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!user.userID) return;\n\n    const q = query(collection(db, \"users\", user.userID, \"servers\"));\n\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const serverIDs: string[] = [];\n\n      querySnapshot.forEach((doc) => {\n        serverIDs.push(doc.id);\n      });\n\n      dispatch(setServerIDs(serverIDs));\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user]);\n\n  useEffect(() => {\n    const q = query(collection(db, \"servers\"));\n\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const serverList: ServerData[] = [];\n\n      querySnapshot.forEach((doc) => {\n        if (!serverIDs.includes(doc.id)) return;\n\n        const docData = doc.data();\n\n        const server: ServerData = {\n          name: docData.name,\n\n          img: docData.img,\n\n          path: `/channels/${doc.id}/${docData.defaultChannel}/`,\n\n          serverID: doc.id,\n\n          defaultChannel: docData?.defaultChannel,\n\n          roles: docData.roles,\n\n          contentFilter: docData.contentFilter,\n        };\n\n        serverList.push(server);\n      });\n\n      dispatch(setServers(serverList));\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [serverIDs]);\n\n  function handleClick(server: ServerData) {\n    dispatch(setServer(server));\n  }\n\n  function addServer() {\n    dispatch(setAddServerOpen(true));\n  }\n\n  return (\n    <Nav>\n      <Sidebar>\n        <Link href=\"/channels/@me\" passHref>\n          <BanterIcon onClick={() => dispatch(resetServerState())}>\n            <ServerBar server-id={\"@me\"} path={router.asPath} />\n\n            <BanterImage\n              path={router.asPath}\n              src={banterIcon}\n              width={48}\n              height={48}\n              alt=\"Banter logo\"\n            />\n          </BanterIcon>\n        </Link>\n\n        <Separator />\n\n        {servers.map((server, index) => {\n          return (\n            <Link href={server.path} passHref key={index}>\n              <ServerContainer onClick={() => handleClick(server)}>\n                <ServerBar server-id={server.serverID} path={router.asPath} />\n                {server.img ? (\n                  <CustomServerIcon\n                    server-id={server.serverID}\n                    path={router.asPath}\n                    loader={() => server.img}\n                    src={server.img}\n                    width={48}\n                    height={48}\n                    unoptimized\n                    alt=\"Server icon\"\n                  />\n                ) : (\n                  <ServerIcon\n                    server={server}\n                    height={48}\n                    width={48}\n                    path={router.asPath}\n                  />\n                )}\n              </ServerContainer>\n            </Link>\n          );\n        })}\n        <AddServerIconContainer onClick={addServer}>\n          <CreateServerIcon />\n        </AddServerIconContainer>\n      </Sidebar>\n    </Nav>\n  );\n}\n\ninterface ServerIconProps {\n  server: ServerData;\n  path: string;\n}\n\ninterface BanterProps {\n  serverID: string;\n  serverPath: string;\n  path: string;\n}\n\nconst Nav = tw.nav`\n  w-18 h-full\n`;\n\nconst Sidebar = tw.ol`\n  flex flex-col bg-gray-200 pt-3 w-18 h-full items-center overflow-x-hidden overflow-y-auto\n  dark:bg-dark-400\n`;\n\nconst BanterIcon = tw.figure`\n  relative flex justify-center w-full cursor-pointer group\n`;\n\nconst ServerContainer = tw.li`\n  relative flex justify-center mb-2 w-full cursor-pointer group\n`;\n\nconst ServerBar = tw.span`\n  absolute left-0 w-1 h-5 bg-black rounded-r-middle top-3.5 hidden\n  group-hover:flex\n  dark:bg-white\n  ${(props: BanterProps) =>\n    props.path.includes(props.serverID) && \"flex h-10 top-1\"}\n`;\n\nconst StyledImage = tw(Image)`\n  rounded-3xl transition-all ease-linear object-cover\n  group-hover:rounded-xl\n`;\n\nconst CustomServerIcon = tw(StyledImage)`\n  rounded-3xl\n  ${(props: BanterProps) => {\n    props.path.includes(props.serverID) && \"rounded-xl\";\n  }}\n`;\n\nconst BanterImage = tw(StyledImage)`\n  ${(props: BanterProps) => {\n    switch (props.path) {\n      case \"/channels/@me\":\n        return \"rounded-xl\";\n\n      default:\n        return null;\n    }\n  }}\n`;\n\nconst ServerIcon = tw(DefaultServerIcon)`\n  text-lg rounded-3xl transition-all ease-linear fill-white\n  group-hover:rounded-xl group-hover:fill-primary\n  dark:text-white dark:fill-dark-100\n  ${(props: ServerIconProps) =>\n    props.path.includes(props.server.serverID) && \"rounded-xl fill-primary\"}\n`;\n\nconst AddServerIconContainer = tw.div`\n  cursor-pointer group\n`;\n\nconst CreateServerIcon = tw(AddServerIcon)`\n  transition-all ease-linear flex-none rounded-3xl fill-white cursor-pointer\n  group-hover:rounded-xl group-hover:fill-active\n  dark:fill-dark-100\n`;\n\nconst Separator = tw.div`\n  w-8 h-0.5 my-2 bg-gray-300\n  dark:bg-dark-50/[.48]\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/ChangeEmail.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/ChangeUsername.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/GithubIcon.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/InstagramIcon.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/LogoutConfirm.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/TwitterIcon.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/UserSettings.tsx",["398"],[],"import tw from \"tailwind-styled-components/dist/tailwind\";\nimport {\n  setUnsavedChangesError,\n  setUserCopy,\n  setUserSettingsOpen,\n  setUserSettingsScreen,\n  useUserSettingsState,\n} from \"../../features/userSettings\";\nimport SettingsSidebar from \"./UserSettingsSidebar\";\nimport SettingsView from \"./userSettingsView/UserSettingsView\";\nimport LogoutConfirm from \"./LogoutConfirm\";\nimport Image from \"next/image\";\nimport closeButton from \"../../../assets/closeButton.svg\";\nimport { useAppDispatch } from \"../../redux/hooks\";\nimport ChangeUsername from \"./ChangeUsername\";\nimport ChangeEmail from \"./ChangeEmail\";\nimport ChangeAvatar from \"./userSettingsView/userProfileSettings/ChangeAvatar\";\nimport { useUserState } from \"../../features/user\";\nimport { useEffect } from \"react\";\n\nexport default function UserSettings() {\n  const {\n    logoutConfirmOpen,\n    changeUsernameOpen,\n    changeEmailOpen,\n    changeAvatarOpen,\n    userCopy,\n  } = useUserSettingsState();\n  const { user } = useUserState();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(setUserCopy(user));\n  }, []);\n\n  function unsavedChanges() {\n    if (!userCopy) return false;\n\n    if (userCopy !== user) {\n      dispatch(setUnsavedChangesError(true));\n\n      setTimeout(() => {\n        dispatch(setUnsavedChangesError(false));\n      }, 1500);\n\n      return true;\n    }\n  }\n\n  function closeWindow() {\n    if (unsavedChanges()) return;\n\n    dispatch(setUserSettingsOpen(false));\n    dispatch(setUserSettingsScreen(\"My Account\"));\n  }\n\n  return (\n    <Container>\n      {logoutConfirmOpen && <LogoutConfirm />}\n\n      {changeUsernameOpen && <ChangeUsername />}\n\n      {changeEmailOpen && <ChangeEmail />}\n\n      {changeAvatarOpen && <ChangeAvatar />}\n\n      <SettingsSidebar />\n\n      <SettingsContainer>\n        <SettingsView />\n\n        <CloseButton>\n          <StyledImage\n            onClick={closeWindow}\n            src={closeButton}\n            width={36}\n            height={36}\n            alt={\"Close button\"}\n          />\n\n          <Caption>ESC</Caption>\n        </CloseButton>\n      </SettingsContainer>\n    </Container>\n  );\n}\n\nconst Container = tw.div`\n  flex flex-none w-screen h-screen select-none\n  dark:bg-dark-100\n`;\n\nconst SettingsContainer = tw.div`\n  relative flex w-full h-full\n`;\n\nconst CloseButton = tw.figure`\n  flex-none pt-15 text-center mr-5\n`;\n\nconst StyledImage = tw(Image)`\n  cursor-pointer\n`;\n\nconst Caption = tw.figcaption`\n  text-[13px] text-gray-300 font-semibold\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/UserSettingsSidebar.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/UserSettingsView.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/appearanceSettings/AppearanceSettings.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/myAccountSettings/MyAccountCard.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/myAccountSettings/MyAccountSettings.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/userProfileSettings/ChangeAvatar.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/userProfileSettings/UserProfileCard.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/components/userSettings/userSettingsView/userProfileSettings/UserProfileSettings.tsx",["399"],[],"import { useEffect } from \"react\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport {\n  setUserAbout,\n  setUserAvatar,\n  setUserAvatarPreview,\n  setUserBanner,\n  useUserState,\n} from \"../../../../features/user\";\nimport {\n  setChangeAvatarOpen,\n  setUserChangesMade,\n  useUserSettingsState,\n} from \"../../../../features/userSettings\";\nimport { useAppDispatch } from \"../../../../redux/hooks\";\nimport UserProfileCard from \"./UserProfileCard\";\n\nexport default function UserProfileSettings() {\n  const { user } = useUserState();\n  const { userCopy } = useUserSettingsState();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!userCopy) return;\n\n    if (user !== userCopy) {\n      dispatch(setUserChangesMade(true));\n    } else {\n      dispatch(setUserChangesMade(false));\n    }\n  }, [user, userCopy]);\n\n  function handleClick() {\n    dispatch(setUserBanner(\"#7CC6FE\"));\n  }\n\n  function handleColorChange(e: React.ChangeEvent<HTMLInputElement>) {\n    dispatch(setUserBanner(e.target.value));\n  }\n\n  function handleAboutChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    dispatch(setUserAbout(e.target.value));\n  }\n\n  function removeAvatar() {\n    dispatch(\n      setUserAvatar(\n        \"https://firebasestorage.googleapis.com/v0/b/banter-69832.appspot.com/o/assets%2FdefaultAvatar.svg?alt=media&token=2cd07b3e-6ee1-4682-8246-57bb20bc0d1f\"\n      )\n    );\n    dispatch(setUserAvatarPreview(null));\n  }\n\n  return (\n    <Container>\n      <Heading>User Profile</Heading>\n\n      <Separator />\n\n      <ContentContainer>\n        <CustomizationContainer>\n          <SettingsContainer>\n            <SettingsHeading>AVATAR</SettingsHeading>\n\n            <AvatarButtonsContainer>\n              <ChangeAvatarButton\n                onClick={() => dispatch(setChangeAvatarOpen(true))}\n              >\n                Change Avatar\n              </ChangeAvatarButton>\n\n              <RemoveAvatarButton onClick={removeAvatar}>\n                Remove Avatar\n              </RemoveAvatarButton>\n            </AvatarButtonsContainer>\n          </SettingsContainer>\n\n          <SettingsContainer>\n            <SettingsHeading>BANNER COLOR</SettingsHeading>\n\n            <ColorInputsContainer>\n              <ColorInputContainer>\n                <ColorButton onClick={handleClick} type=\"button\" />\n\n                <ColorInputLabel>Default</ColorInputLabel>\n              </ColorInputContainer>\n\n              <ColorInputContainer>\n                <ColorInput\n                  onChange={handleColorChange}\n                  type=\"color\"\n                  value={user.banner}\n                />\n\n                <ColorInputLabel>Custom</ColorInputLabel>\n              </ColorInputContainer>\n            </ColorInputsContainer>\n          </SettingsContainer>\n\n          <AboutContainer>\n            <SettingsHeading>ABOUT ME</SettingsHeading>\n\n            <SettingsSubheading>\n              You can use links if you{\"'\"}d like.\n            </SettingsSubheading>\n\n            <AboutMe\n              onChange={handleAboutChange}\n              value={user.about}\n              placeholder=\"Tell this server a bit about yourself\"\n              maxLength={190}\n              rows={6}\n            />\n          </AboutContainer>\n        </CustomizationContainer>\n\n        <UserProfileCardContainer>\n          <SettingsHeading>PREVIEW</SettingsHeading>\n\n          <UserProfileCard />\n        </UserProfileCardContainer>\n      </ContentContainer>\n    </Container>\n  );\n}\n\nconst Container = tw.main`\n  pt-15 px-10 pb-20\n`;\n\nconst Heading = tw.h1`\n  mb-5 text-xl font-semibold w-165\n  dark:text-white\n`;\n\nconst Separator = tw.div`\n  w-full mb-6 pb-1 border-b border-gray-200\n  dark:border-dark-50/[.48]\n`;\n\nconst ContentContainer = tw.div`\n  flex\n`;\n\nconst CustomizationContainer = tw.div`\n  flex-1 min-w-[270px] max-w-[340px]\n`;\n\nconst SettingsContainer = tw.div`\n  mb-6 pb-6 border-b\n  dark:border-dark-50/[.48]\n`;\nconst SettingsHeading = tw.h5`\n  mb-2 text-xs text-gray-600 font-semibold\n  dark:text-text-primary\n`;\n\nconst SettingsSubheading = tw.div`\n  mb-4 text-sm text-text-primary\n`;\n\nconst AvatarButtonsContainer = tw.div`\n`;\n\nconst ChangeAvatarButton = tw.button`\n  w-fit h-8 px-4 py-0.5 bg-indigo-500 text-white text-sm font-medium rounded-middle\n`;\n\nconst RemoveAvatarButton = tw(ChangeAvatarButton)`\n  bg-white text-sm text-gray-500\n  dark:bg-dark-100 dark:text-white\n`;\n\nconst ColorInputsContainer = tw.div`\n  flex\n`;\n\nconst ColorInputContainer = tw.div`\n  flex flex-col mr-4 text-center\n`;\n\nconst ColorInput = tw.input`\n  w-[69px] h-[50px] rounded border-none\n`;\n\nconst ColorButton = tw(ColorInput)`\n  bg-primary\n`;\n\nconst ColorInputLabel = tw.label`\n  mt-1 text-xs text-gray-600\n  dark:text-text-primary\n`;\n\nconst AboutContainer = tw(SettingsContainer)`\n  border-none\n`;\n\nconst AboutMe = tw.textarea`\n  w-full p-2.5 pr-8 bg-gray-50 rounded-middle resize-none\n  dark:bg-dark-400 dark:text-text-tertiary\n`;\n\nconst UserProfileCardContainer = tw.div`\n  mb-6 ml-5 pb-6\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/addServer.ts",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/sendGif.ts",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/serverSettings.ts",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/servers.ts",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/user.ts",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/features/userSettings.ts",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/middleware.ts",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/_app.tsx",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/_document.tsx",["400"],[],"import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html className=\"dark\">\n      <Head>\n        <title>Banter</title>\n\n        <meta name=\"description\" content=\"Banter is a Discord clone\" />\n\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/channels/@me.tsx",["401","402"],[],"import { useEffect } from \"react\";\nimport type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Servers from \"../../components/servers/Servers\";\nimport Channels from \"../../components/channels/Channels\";\nimport UserSettings from \"../../components/userSettings/UserSettings\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport { setUser, resetUserState, useUserState } from \"../../features/user\";\nimport { useAppDispatch } from \"../../redux/hooks\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { doc, getDoc, onSnapshot } from \"firebase/firestore\";\nimport { useServersState } from \"../../features/servers\";\nimport { useUserSettingsState } from \"../../features/userSettings\";\nimport { db } from \"../../../firebase\";\nimport { useRouter } from \"next/router\";\nimport { useAddServerState } from \"../../features/addServer\";\nimport AddServer from \"../../components/addServer/AddServer\";\nimport LandingPage from \"../../components/LandingPage\";\n\nconst Home: NextPage = () => {\n  const auth = getAuth();\n  const { user } = useUserState();\n  const { channel } = useServersState();\n  const { userSettingsOpen } = useUserSettingsState();\n  const { addServerOpen } = useAddServerState();\n  const router = useRouter();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const authStateListener = onAuthStateChanged(auth, async (user) => {\n      if (!user) return redirect();\n\n      const docRef = doc(db, \"users\", user.uid);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) return redirect();\n\n      const docData = docSnap.data();\n\n      const currentUser = {\n        username: docData.username,\n\n        tag: docData.tag,\n\n        avatar: docData.avatar,\n\n        about: docData.about,\n\n        banner: docData.banner,\n\n        userID: user.uid,\n\n        email: user.email,\n      };\n\n      dispatch(setUser(currentUser));\n    });\n    return () => {\n      authStateListener();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!user.userID) return;\n\n    const unsubscribe = onSnapshot(doc(db, \"users\", user.userID), (doc) => {\n      if (!doc.exists()) return;\n\n      const docData = doc.data();\n\n      const currentUser = {\n        username: docData.username,\n\n        tag: docData.tag,\n\n        avatar: docData.avatar,\n\n        about: docData.about,\n\n        banner: docData.banner,\n\n        userID: doc.id,\n\n        email: docData.email,\n      };\n\n      dispatch(setUser(currentUser));\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  function redirect() {\n    dispatch(resetUserState());\n\n    router.push(\"/login\");\n  }\n\n  return (\n    <PageContainer>\n      <Head>\n        <title>{channel.name ? channel.name : \"Banter\"}</title>\n\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n      </Head>\n\n      {userSettingsOpen && <UserSettings />}\n\n      {addServerOpen && <AddServer />}\n\n      <Servers />\n\n      <Channels />\n\n      <LandingPage />\n    </PageContainer>\n  );\n};\n\nconst PageContainer = tw.div`\n  flex w-screen h-screen overflow-hidden select-none\n  dark:bg-dark-100\n`;\n\nexport default Home;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/channels/[sid]/[cid].tsx",["403","404","405"],[],"import { useEffect } from \"react\";\nimport type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Servers from \"../../../components/servers/Servers\";\nimport Channels from \"../../../components/channels/Channels\";\nimport Chat from \"../../../components/chat/Chat\";\nimport UserSettings from \"../../../components/userSettings/UserSettings\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport { setUser, resetUserState, useUserState } from \"../../../features/user\";\nimport { useAppDispatch } from \"../../../redux/hooks\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { doc, getDoc, onSnapshot } from \"firebase/firestore\";\nimport { MemberRole, useServersState } from \"../../../features/servers\";\nimport { useUserSettingsState } from \"../../../features/userSettings\";\nimport { db } from \"../../../../firebase\";\nimport { useRouter } from \"next/router\";\nimport Members from \"../../../components/Members\";\nimport Title from \"../../../components/Title\";\nimport { useAddServerState } from \"../../../features/addServer\";\nimport AddServer from \"../../../components/addServer/AddServer\";\nimport ServerDropdown from \"../../../components/serverDropdown/ServerDropdown\";\nimport { useServerSettingsState } from \"../../../features/serverSettings\";\nimport InviteFriends from \"../../../components/serverDropdown/InviteFriends\";\nimport MemberProfileCard from \"../../../components/MemberProfileCard\";\nimport CreateChannel from \"../../../components/serverDropdown/CreateChannel\";\nimport ServerSettings from \"../../../components/serverSettings/ServerSettings\";\nimport ViewMedia from \"../../../components/ViewMedia\";\n\nconst Home: NextPage = () => {\n  const auth = getAuth();\n  const { user } = useUserState();\n  const { channel, memberProfileCardOpen, server, viewMediaOpen } =\n    useServersState();\n  const { userSettingsOpen, memberListOpen } = useUserSettingsState();\n  const { addServerOpen } = useAddServerState();\n  const {\n    serverDropdownOpen,\n    serverSettingsOpen,\n    inviteFriendsOpen,\n    createChannelOpen,\n  } = useServerSettingsState();\n  const router = useRouter();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const authStateListener = onAuthStateChanged(auth, async (user) => {\n      if (!user) return redirect();\n\n      const docRef = doc(db, \"users\", user.uid);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) return redirect();\n\n      const docData = docSnap.data();\n\n      const currentUser = {\n        username: docData.username,\n\n        tag: docData.tag,\n\n        avatar: docData.avatar,\n\n        about: docData.about,\n\n        banner: docData.banner,\n\n        userID: user.uid,\n\n        email: user.email,\n      };\n\n      dispatch(setUser(currentUser));\n    });\n    return () => {\n      authStateListener();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!user.userID) return;\n\n    const unsubscribe = onSnapshot(doc(db, \"users\", user.userID), (doc) => {\n      if (!doc.exists()) return;\n\n      const docData = doc.data();\n\n      const currentUser = {\n        username: docData.username,\n\n        tag: docData.tag,\n\n        avatar: docData.avatar,\n\n        about: docData.about,\n\n        banner: docData.banner,\n\n        userID: doc.id,\n\n        email: docData.email,\n      };\n\n      dispatch(setUser(currentUser));\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!server.serverID || !user.userID) return;\n\n    const docRef = doc(db, \"servers\", server.serverID, \"members\", user.userID);\n\n    const unsubscribe = onSnapshot(docRef, (doc) => {\n      const docData = doc.data();\n\n      const roles: MemberRole = {\n        userID: doc.id,\n\n        serverOwner: docData?.serverOwner,\n\n        roles: docData?.roles,\n\n        // permissions: docData?.permissions,\n      };\n\n      dispatch(setUser({ ...user, roles }));\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [server]);\n\n  function redirect() {\n    dispatch(resetUserState());\n\n    router.push(\"/login\");\n  }\n\n  return (\n    <PageContainer>\n      <Head>\n        <title>{channel.name ? channel.name : \"Banter\"}</title>\n\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n      </Head>\n\n      {memberProfileCardOpen && <MemberProfileCard />}\n\n      {userSettingsOpen && <UserSettings />}\n\n      {addServerOpen && <AddServer />}\n\n      {serverDropdownOpen && <ServerDropdown />}\n\n      {serverSettingsOpen && <ServerSettings />}\n\n      {inviteFriendsOpen && <InviteFriends />}\n\n      {createChannelOpen && <CreateChannel />}\n\n      {viewMediaOpen && <ViewMedia />}\n\n      <Servers />\n\n      <Container>\n        <Channels />\n\n        <ChatContainer>\n          <Title />\n\n          <ContentContainer>\n            <Chat />\n\n            {memberListOpen && <Members />}\n          </ContentContainer>\n        </ChatContainer>\n      </Container>\n    </PageContainer>\n  );\n};\n\nconst PageContainer = tw.div`\n  flex w-screen h-screen overflow-hidden select-none\n`;\n\nconst Container = tw.div`\n  flex w-full h-full\n`;\n\nconst ChatContainer = tw.div`\n  flex flex-col flex-1\n`;\n\nconst ContentContainer = tw.div`\n  flex flex-1\n`;\n\nexport default Home;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/login.tsx",["406"],[],"import LoginForm from \"../components/LoginForm\";\nimport tw from \"tailwind-styled-components/dist/tailwind\";\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { getAuth, onAuthStateChanged } from \"@firebase/auth\";\nimport { doc, getDoc } from \"@firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport { setUser, resetUserState } from \"../features/user\";\nimport { useAppDispatch } from \"../redux/hooks\";\n\nexport default function Register() {\n  const auth = getAuth();\n  const dispatch = useAppDispatch();\n  const router = useRouter();\n\n  useEffect(() => {\n    const authStateListener = onAuthStateChanged(auth, async (user) => {\n      if (!user) return dispatch(resetUserState());\n\n      const docRef = doc(db, \"users\", user.uid);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) return dispatch(resetUserState());\n\n      const docData = docSnap.data();\n\n      const currentUser = {\n        username: docData.username,\n\n        tag: docData.tag,\n\n        avatar: docData.avatar,\n\n        about: docData.about,\n\n        banner: docData.banner,\n\n        userID: user.uid,\n\n        email: docData.email,\n      };\n\n      dispatch(setUser(currentUser));\n      router.push(\"/channels/@me\");\n    });\n    return () => {\n      authStateListener();\n    };\n  }, []);\n\n  return (\n    <Container>\n      <LoginForm></LoginForm>\n    </Container>\n  );\n}\n\nexport async function getServerSideProps() {\n  const auth = getAuth();\n\n  if (auth.currentUser) {\n    return {\n      redirect: {\n        destination: \"/channels/@me\",\n        permanent: false,\n      },\n    };\n  }\n  return {\n    props: {},\n  };\n}\n\nconst Container = tw.div`\n  flex justify-center items-center w-screen h-screen bg-indigo-500\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/pages/register.tsx",["407"],[],"import tw from \"tailwind-styled-components/dist/tailwind\";\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { getAuth, onAuthStateChanged } from \"@firebase/auth\";\nimport { resetUserState } from \"../features/user\";\nimport { useAppDispatch } from \"../redux/hooks\";\nimport RegistrationForm from \"../components/RegistrationForm\";\n\nexport default function Register() {\n  const auth = getAuth();\n  const dispatch = useAppDispatch();\n  const router = useRouter();\n\n  useEffect(() => {\n    const authStateListener = onAuthStateChanged(auth, (user) => {\n      if (!user) return dispatch(resetUserState());\n      console.log(user)\n      router.push(\"/channels/@me\");\n    });\n    return () => {\n      authStateListener();\n    };\n  }, []);\n\n  return (\n    <Container>\n      <RegistrationForm></RegistrationForm>\n    </Container>\n  );\n}\n\nexport async function getServerSideProps() {\n  const auth = getAuth();\n\n  if (auth.currentUser) {\n    return {\n      redirect: {\n        destination: \"/channels/@me\",\n        permanent: false,\n      },\n    };\n  }\n  return {\n    props: {},\n  };\n}\n\nconst Container = tw.div`\n  flex justify-center items-center w-screen h-screen bg-indigo-500\n`;\n","/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/redux/hooks.ts",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/redux/store.ts",[],[],"/Users/farhatmahi/Documents/Cehpoint/discord-clone/src/utilities/functions.tsx",[],[],{"ruleId":"408","severity":1,"message":"409","line":29,"column":6,"nodeType":"410","endLine":29,"endColumn":21,"suggestions":"411"},{"ruleId":"408","severity":1,"message":"412","line":42,"column":6,"nodeType":"410","endLine":42,"endColumn":14,"suggestions":"413"},{"ruleId":"408","severity":1,"message":"409","line":66,"column":6,"nodeType":"410","endLine":66,"endColumn":40,"suggestions":"414"},{"ruleId":"408","severity":1,"message":"415","line":106,"column":6,"nodeType":"410","endLine":106,"endColumn":8,"suggestions":"416"},{"ruleId":"408","severity":1,"message":"417","line":127,"column":6,"nodeType":"410","endLine":127,"endColumn":24,"suggestions":"418"},{"ruleId":"408","severity":1,"message":"417","line":58,"column":6,"nodeType":"410","endLine":58,"endColumn":14,"suggestions":"419"},{"ruleId":"408","severity":1,"message":"420","line":104,"column":6,"nodeType":"410","endLine":104,"endColumn":19,"suggestions":"421"},{"ruleId":"408","severity":1,"message":"417","line":60,"column":6,"nodeType":"410","endLine":60,"endColumn":23,"suggestions":"422"},{"ruleId":"408","severity":1,"message":"423","line":88,"column":6,"nodeType":"410","endLine":88,"endColumn":23,"suggestions":"424"},{"ruleId":"408","severity":1,"message":"425","line":146,"column":6,"nodeType":"410","endLine":146,"endColumn":14,"suggestions":"426"},{"ruleId":"408","severity":1,"message":"427","line":82,"column":6,"nodeType":"410","endLine":82,"endColumn":25,"suggestions":"428"},{"ruleId":"408","severity":1,"message":"429","line":42,"column":6,"nodeType":"410","endLine":42,"endColumn":19,"suggestions":"430"},{"ruleId":"408","severity":1,"message":"431","line":47,"column":6,"nodeType":"410","endLine":47,"endColumn":21,"suggestions":"432"},{"ruleId":"408","severity":1,"message":"433","line":24,"column":6,"nodeType":"410","endLine":24,"endColumn":8,"suggestions":"434"},{"ruleId":"408","severity":1,"message":"417","line":54,"column":6,"nodeType":"410","endLine":54,"endColumn":26,"suggestions":"435"},{"ruleId":"408","severity":1,"message":"417","line":37,"column":6,"nodeType":"410","endLine":37,"endColumn":26,"suggestions":"436"},{"ruleId":"408","severity":1,"message":"420","line":26,"column":6,"nodeType":"410","endLine":26,"endColumn":8,"suggestions":"437"},{"ruleId":"408","severity":1,"message":"417","line":36,"column":6,"nodeType":"410","endLine":36,"endColumn":26,"suggestions":"438"},{"ruleId":"408","severity":1,"message":"439","line":14,"column":6,"nodeType":"410","endLine":14,"endColumn":25,"suggestions":"440"},{"ruleId":"408","severity":1,"message":"417","line":47,"column":6,"nodeType":"410","endLine":47,"endColumn":12,"suggestions":"441"},{"ruleId":"408","severity":1,"message":"417","line":85,"column":6,"nodeType":"410","endLine":85,"endColumn":17,"suggestions":"442"},{"ruleId":"408","severity":1,"message":"443","line":34,"column":6,"nodeType":"410","endLine":34,"endColumn":8,"suggestions":"444"},{"ruleId":"408","severity":1,"message":"417","line":31,"column":6,"nodeType":"410","endLine":31,"endColumn":22,"suggestions":"445"},{"ruleId":"446","severity":1,"message":"447","line":7,"column":9,"nodeType":"448","endLine":7,"endColumn":30},{"ruleId":"408","severity":1,"message":"449","line":61,"column":6,"nodeType":"410","endLine":61,"endColumn":8,"suggestions":"450"},{"ruleId":"408","severity":1,"message":"451","line":93,"column":6,"nodeType":"410","endLine":93,"endColumn":8,"suggestions":"452"},{"ruleId":"408","severity":1,"message":"449","line":77,"column":6,"nodeType":"410","endLine":77,"endColumn":8,"suggestions":"453"},{"ruleId":"408","severity":1,"message":"451","line":109,"column":6,"nodeType":"410","endLine":109,"endColumn":8,"suggestions":"454"},{"ruleId":"408","severity":1,"message":"443","line":135,"column":6,"nodeType":"410","endLine":135,"endColumn":14,"suggestions":"455"},{"ruleId":"408","severity":1,"message":"456","line":49,"column":6,"nodeType":"410","endLine":49,"endColumn":8,"suggestions":"457"},{"ruleId":"408","severity":1,"message":"456","line":23,"column":6,"nodeType":"410","endLine":23,"endColumn":8,"suggestions":"458"},"react-hooks/exhaustive-deps","React Hook useLayoutEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["459"],"React Hook useLayoutEffect has a missing dependency: 'server.roles'. Either include it or remove the dependency array.",["460"],["461"],"React Hook useEffect has missing dependencies: 'dispatch', 'memberPreview.roles', 'memberPreview.serverOwner', and 'memberPreview.userID'. Either include them or remove the dependency array.",["462"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["463"],["464"],"React Hook useEffect has missing dependencies: 'dispatch' and 'server.roles'. Either include them or remove the dependency array.",["465"],["466"],"React Hook useEffect has missing dependencies: 'dispatch' and 'server.defaultChannel'. Either include them or remove the dependency array.",["467"],"React Hook useEffect has a missing dependency: 'theme'. Either include it or remove the dependency array.",["468"],"React Hook useEffect has missing dependencies: 'dispatch' and 'server.serverID'. Either include them or remove the dependency array.",["469"],"React Hook useEffect has a missing dependency: 'server.contentFilter'. Either include it or remove the dependency array.",["470"],"React Hook useEffect has a missing dependency: 'fetchCategories'. Either include it or remove the dependency array.",["471"],"React Hook useEffect has missing dependencies: 'dispatch' and 'server'. Either include them or remove the dependency array.",["472"],["473"],["474"],["475"],["476"],"React Hook useEffect has a missing dependency: 'getInitials'. Either include it or remove the dependency array.",["477"],["478"],["479"],"React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.",["480"],["481"],"@next/next/no-title-in-document-head","Do not use `<title>` element with `<Head />` component from `next/document`. Titles should defined at the page-level using `<Head />` from `next/head` instead. See: https://nextjs.org/docs/messages/no-title-in-document-head","JSXElement","React Hook useEffect has missing dependencies: 'auth', 'dispatch', and 'redirect'. Either include them or remove the dependency array.",["482"],"React Hook useEffect has missing dependencies: 'dispatch' and 'user.userID'. Either include them or remove the dependency array.",["483"],["484"],["485"],["486"],"React Hook useEffect has missing dependencies: 'auth', 'dispatch', and 'router'. Either include them or remove the dependency array.",["487"],["488"],{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"499","fix":"515"},{"desc":"516","fix":"517"},{"desc":"516","fix":"518"},{"desc":"519","fix":"520"},{"desc":"516","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"524","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"531","fix":"535"},{"desc":"533","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"539","fix":"541"},"Update the dependencies array to be: [dispatch, leftoverRoles]",{"range":"542","text":"543"},"Update the dependencies array to be: [member, server.roles]",{"range":"544","text":"545"},"Update the dependencies array to be: [dispatch, memberProfileCardPosition, onRef]",{"range":"546","text":"547"},"Update the dependencies array to be: [dispatch, memberPreview.roles, memberPreview.serverOwner, memberPreview.userID]",{"range":"548","text":"549"},"Update the dependencies array to be: [assignRoleHeight, dispatch]",{"range":"550","text":"551"},"Update the dependencies array to be: [dispatch, server]",{"range":"552","text":"553"},"Update the dependencies array to be: [dispatch, memberRoles, server.roles]",{"range":"554","text":"555"},"Update the dependencies array to be: [dispatch, server.serverID]",{"range":"556","text":"557"},"Update the dependencies array to be: [dispatch, server.defaultChannel, server.serverID]",{"range":"558","text":"559"},"Update the dependencies array to be: [sender, theme]",{"range":"560","text":"561"},"Update the dependencies array to be: [channel.channelID, dispatch, server.serverID]",{"range":"562","text":"563"},"Update the dependencies array to be: [searchInput, server.contentFilter]",{"range":"564","text":"565"},"Update the dependencies array to be: [fetchCategories, searchResults]",{"range":"566","text":"567"},{"range":"568","text":"553"},"Update the dependencies array to be: [dispatch, server, serverCopy]",{"range":"569","text":"570"},{"range":"571","text":"570"},"Update the dependencies array to be: [dispatch, server.roles]",{"range":"572","text":"573"},{"range":"574","text":"570"},"Update the dependencies array to be: [getInitials, props.server.name]",{"range":"575","text":"576"},"Update the dependencies array to be: [dispatch, user]",{"range":"577","text":"578"},"Update the dependencies array to be: [dispatch, serverIDs]",{"range":"579","text":"580"},{"range":"581","text":"578"},"Update the dependencies array to be: [dispatch, user, userCopy]",{"range":"582","text":"583"},"Update the dependencies array to be: [auth, dispatch, redirect]",{"range":"584","text":"585"},"Update the dependencies array to be: [dispatch, user.userID]",{"range":"586","text":"587"},{"range":"588","text":"585"},{"range":"589","text":"587"},"Update the dependencies array to be: [dispatch, server, user]",{"range":"590","text":"591"},"Update the dependencies array to be: [auth, dispatch, router]",{"range":"592","text":"593"},{"range":"594","text":"593"},[968,983],"[dispatch, leftoverRoles]",[1303,1311],"[member, server.roles]",[2097,2131],"[dispatch, memberProfileCardPosition, onRef]",[2927,2929],"[dispatch, memberPreview.roles, memberPreview.serverOwner, memberPreview.userID]",[3511,3529],"[assignRoleHeight, dispatch]",[1596,1604],"[dispatch, server]",[2667,2680],"[dispatch, memberRoles, server.roles]",[1580,1597],"[dispatch, server.serverID]",[2184,2201],"[dispatch, server.defaultChannel, server.serverID]",[3801,3809],"[sender, theme]",[1806,1825],"[channel.channelID, dispatch, server.serverID]",[1321,1334],"[searchInput, server.contentFilter]",[1417,1432],"[fetchCategories, searchResults]",[879,881],[1475,1495],"[dispatch, server, serverCopy]",[1167,1187],[874,876],"[dispatch, server.roles]",[1076,1096],[385,404],"[getInitials, props.server.name]",[1359,1365],"[dispatch, user]",[2150,2161],"[dispatch, serverIDs]",[1096,1098],[813,829],"[dispatch, user, userCopy]",[1962,1964],"[auth, dispatch, redirect]",[2518,2520],"[dispatch, user.userID]",[2815,2817],[3371,3373],[3915,3923],"[dispatch, server, user]",[1315,1317],"[auth, dispatch, router]",[757,759]]